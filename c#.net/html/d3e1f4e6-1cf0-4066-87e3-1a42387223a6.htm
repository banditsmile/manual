<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>查询表达式基础（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="查询表达式基础" />
      <MSHelp:Keyword Index="A" Term="d3e1f4e6-1cf0-4066-87e3-1a42387223a6" />
      <MSHelp:Keyword Index="K" Term="查询表达式 [C# 中的 LINQ], 查询执行" />
      <MSHelp:Attr Name="RevisionNumber" Value="24" />
      <MSHelp:Attr Name="AssetID" Value="d3e1f4e6-1cf0-4066-87e3-1a42387223a6" />
      <MSHelp:Attr Name="Abstract" Value="“查询”是指一组指令，这些指令描述要从一个或多个给定数据源检索的数据以及返回的数据应该使用的格式和组织形式。查询不同于它所产生的结果。" />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">查询表达式基础（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="d3e1f4e6-1cf0-4066-87e3-1a42387223a6.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction" /><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0, event)" tabindex="0"><img id="sectionToggle0" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />什么是查询？它有什么用途？</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>“查询”是指一组指令，这些指令描述要从一个或多个给定数据源检索的数据以及返回的数据应该使用的格式和组织形式。查询不同于它所产生的结果。</p><p>通常，源数据会在逻辑上组织为相同种类的元素序列。SQL 数据库表包含一个行序列。与此类似，ADO.NET<span sdata="cer" target="T:System.Data.DataRow"><mshelp:link keywords="T:System.Data.DataRow" tabindex="0">DataRow</mshelp:link></span> 包含一个 <span sdata="cer" target="T:System.Data.DataTable"><mshelp:link keywords="T:System.Data.DataTable" tabindex="0">DataTable</mshelp:link></span> 对象序列。在 XML 文件中，有一个 XML 元素“序列”（不过这些元素按分层形式组织为树结构）。内存中的集合包含一个对象序列。</p><p>从应用程序的角度来看，原始源数据的具体类型和结构并不重要。应用程序始终将源数据视为一个 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 或 <span sdata="cer" target="T:System.Linq.IQueryable`1"><mshelp:link keywords="T:System.Linq.IQueryable`1" tabindex="0">IQueryable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 集合。在 LINQ to XML 中，源数据显示为一个 <b>IEnumerable</b>&lt;<span sdata="cer" target="T:System.Xml.Linq.XElement"><mshelp:link keywords="T:System.Xml.Linq.XElement" tabindex="0">XElement</mshelp:link></span>&gt;。在 LINQ to DataSet 中，它是一个 <b>IEnumerable</b>&lt;<span sdata="cer" target="T:System.Data.DataRow"><mshelp:link keywords="T:System.Data.DataRow" tabindex="0">DataRow</mshelp:link></span>&gt;。在 LINQ to SQL 中，它是您定义用来表示 SQL 表中数据的任何自定义对象的 <b>IEnumerable</b> 或 <b>IQueryable</b>。</p><p>指定此源序列后，查询可以进行下列三项工作之一：</p><ul><li><p>检索一个元素子集以产生一个新序列，但不修改单个元素。然后，查询可以按各种方式对返回的序列进行排序或分组，如下面的示例所示（假定 <span class="code">scores</span> 是 <span sdata="langKeyword" value="int[]"><span class="keyword">int[]</span></span>）：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; highScoresQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> score &gt; 80
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">descending</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score;

</pre></td></tr></table></span></div></div></li><li><p>如上一个示例所述检索一个元素序列，但是将这些元素转换为具有新类型的对象。例如，查询可以只从数据源中的某些客户记录检索姓氏。或者，查询可以检索完整的记录，再使用它构建另一个内存中对象类型甚至 XML 数据，然后生成最终的结果序列。下面的示例演示了从 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 到 <span sdata="langKeyword" value="string"><span class="keyword">string</span></span> 的转换。请注意 <span class="code">highScoresQuery</span> 的新类型。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>&gt; highScoresQuery2 =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> score &gt; 80
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">descending</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> String.Format(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"The score is {0}"</span>, score);

</pre></td></tr></table></span></div></div></li><li><p>检索有关源数据的单一值，例如：</p><ul><li><p>符合某个条件的元素的数量。</p></li><li><p>具有最大值或最小值的元素。</p></li><li><p>符合某个条件的第一个元素，或一组指定元素中的特定值之和。例如，下面的查询从 <span class="code">scores</span> 整数数组中返回高于 80 的分数的数量。</p></li></ul><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> highScoreCount =
    (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> score &gt; 80
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score)
     .Count();

</pre></td></tr></table></span></div></div><p>在上一个示例中，请注意在 <b>Count</b> 方法调用之前的查询表达式两旁使用了括号。另一种表示方式是使用一个新变量来存储具体结果。此技术的可读性更好，因为它将存储查询的变量与存储结果的查询区分开来。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; highScoresQuery3 =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> score &gt; 80
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score;

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> scoreCount = highScoresQuery3.Count();

</pre></td></tr></table></span></div></div></li></ul><p>在上一个示例中，查询是在 <b>Count</b> 调用中执行的，因为 <b>Count</b> 必须循环访问结果以便确定 <span class="code">highScoresQuery</span> 返回的元素数量。</p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1, event)" tabindex="0"><img id="sectionToggle1" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />什么是查询表达式？</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>“查询表达式”是用查询语法表示的查询，是一流的语言构造。它就像任何其他表达式一样，并且可以用在 C# 表达式有效的任何上下文中。查询表达式由一组用类似于 SQL 或 XQuery 的声明性语法编写的子句组成。每个子句又包含一个或多个 C# 表达式，而这些表达式本身又可能是查询表达式或包含查询表达式。</p><p>查询表达式必须以 <mshelp:link keywords="1aefd18c-1314-47f8-99ec-9bcefb09e699" tabindex="0">from</mshelp:link> 子句开头，并且必须以 <mshelp:link keywords="df01e266-5781-4aaa-80c4-67cf28ea093f" tabindex="0">select</mshelp:link> 或 <mshelp:link keywords="c817242e-b12c-4baa-a57e-73ee138f34d1" tabindex="0">group</mshelp:link> 子句结尾。在第一个 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句和最后一个 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 子句之间，查询表达式可以包含一个或多个下列可选子句：<mshelp:link keywords="7f9bf952-7744-4f91-b676-cddb55d107c3" tabindex="0">where</mshelp:link>、<mshelp:link keywords="21f87f48-d69d-4e95-9a52-6fec47b37e1f" tabindex="0">orderby</mshelp:link>、<mshelp:link keywords="76e9df84-092c-41a6-9537-c3f1cbd7f0fb" tabindex="0">join</mshelp:link>、<mshelp:link keywords="13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4" tabindex="0">let</mshelp:link> 甚至附加的 <mshelp:link keywords="1aefd18c-1314-47f8-99ec-9bcefb09e699" tabindex="0">from</mshelp:link> 子句。还可以使用 <mshelp:link keywords="81ec62c1-f0b1-4755-8a31-959876e77f65" tabindex="0">into</mshelp:link> 关键字使 <span sdata="langKeyword" value="join"><span class="keyword">join</span></span> 或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 子句的结果能够充当同一查询表达式中附加查询子句的源。</p><h3 class="subHeading">查询变量</h3><div class="subsection"><p>在 LINQ 中，查询变量是任何存储查询（而非查询结果）的变量。更具体地说，查询变量始终是一个可枚举的类型，当在 <span sdata="langKeyword" value="foreach"><span class="keyword">foreach</span></span> 语句中或在对其 <b>IEnumerator.MoveNext</b> 方法的直接调用中循环访问它时，它会生成一序列元素。</p><p>下面的代码示例演示了一个简单的查询表达式，它含有一个数据源、一个筛选子句和一个排序子句，但不对源元素进行转换。<span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句结束了该查询。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main()
{
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Data source.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] scores = { 90, 71, 82, 93, 75, 82 };

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Query Expression.</span>
    IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; scoreQuery = <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//query variable</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//required</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> score &gt; 80 <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// optional</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">descending</span> <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// optional</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score; <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//must end with select or group</span>

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Execute the query to produce the results</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> testScore <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scoreQuery)
    {
        Console.WriteLine(testScore);
    }                  
}
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Outputs: 90 82 93 82      </span>

</pre></td></tr></table></span></div></div><p>在上一个示例中，<span class="code">scoreQuery</span> 是一个查询变量，有时简称为“查询”。查询变量并不存储实际的结果数据（这些数据是在 <span sdata="langKeyword" value="foreach"><span class="keyword">foreach</span></span> 循环中产生的）。另外，当 <span sdata="langKeyword" value="foreach"><span class="keyword">foreach</span></span> 语句执行时，查询结果并不是通过查询变量 <span class="code">scoreQuery</span> 返回的。相反，它们是通过迭代变量 <span class="code">testScore</span> 返回的。可以在另一个 <span sdata="langKeyword" value="foreach"><span class="keyword">foreach</span></span> 循环中迭代 <span class="code">scoreQuery</span> 变量。只要该变量和数据源都没有修改，该变量都将产生相同的结果。</p><p>查询变量可以存储用查询语法或方法语法（或二者的组合）表示的查询。在下面的示例中，<span class="code">queryMajorCities</span> 和 <span class="code">queryMajorCities2</span> 都是查询变量：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Query syntax</span>
IEnumerable&lt;City&gt; queryMajorCities =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> cities
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &gt; 100000
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city;


<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Method-based syntax</span>
IEnumerable&lt;City&gt; queryMajorCities2 = cities.Where(c =&gt; c.Population &gt; 100000);

</pre></td></tr></table></span></div></div><p>另一方面，下面的两个示例演示了不是查询变量的变量，即使每个变量都用查询进行了初始化。它们不是查询变量的原因是它们存储了结果：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> highestScore =
    (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score)
    .Max();

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// or split the expression</span>
IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; scoreQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> score <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> scores
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> score;

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> highScore = scoreQuery.Max();

IEnumerable&lt;City&gt; largeCityList =
    (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> country.Cities
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &gt; 10000
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city)
       .ToList();

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// or split the expression</span>
IEnumerable&lt;City&gt; largeCityList2 =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> country.Cities
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &gt; 10000
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city;

List&lt;City&gt; largeCities = largeCityList2.ToList();

</pre></td></tr></table></span></div></div><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" title="说明" src="../icons/alert_note.gif" /><b>说明：</b></th></tr><tr><td><p>在 LINQ 文档中，存储查询的变量在其名称中包含单词“query”，而存储实际结果的变量在其名称中不包含单词“query”。</p></td></tr></table></div><p>有关用于表示查询的不同方式的更多信息，请参见<span sdata="link"><mshelp:link keywords="eedd6dd9-fec2-428c-9581-5b8783810ded" tabindex="0">查询语法与方法语法 (LINQ)</mshelp:link></span>。</p><h4 class="subHeading">查询变量的显式类型化和隐式类型化</h4><div class="subsection"><p>本文档通常提供查询变量的显式类型，以便演示查询变量和 <mshelp:link keywords="df01e266-5781-4aaa-80c4-67cf28ea093f" tabindex="0">select 子句</mshelp:link>之间的类型关系。但是，也可以使用 <mshelp:link keywords="0777850a-2691-4e3e-927f-0c850f5efe15" tabindex="0">var</mshelp:link> 关键字指示编译器在编译时推断查询变量（或任何其他本地变量）的类型。例如，还可以使用隐式类型化表示本主题前面部分中演示的查询示例：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Use of var is optional here and in all queries.</span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// queryCities is an IEnumerable&lt;City&gt; just as </span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// when it is explicitly typed.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> queryCities =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> cities
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &gt; 100000
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city;

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见<span sdata="link"><a href="b9218fb2-ef5d-4814-8a8e-2bc29b0bbc9b.htm">隐式类型的局部变量（C# 编程指南）</a></span>和<span sdata="link"><mshelp:link keywords="99118938-d47c-4d7e-bb22-2657a9f95268" tabindex="0">查询操作中的类型关系 (LINQ)</mshelp:link></span>。</p></div></div><h3 class="subHeading">开始查询表达式</h3><div class="subsection"><p>查询表达式必须以 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句开头。它同时指定了数据源和范围变量。在对源序列进行遍历的过程中，范围变量表示源序列中的每个后续元素。将根据数据源中元素的类型对范围变量进行强类型化。在下面的示例中，因为 <span class="code">countries</span> 是 <span class="code">Country</span> 对象数组，所以范围变量也被类型化为 <span class="code">Country</span>，这样就可以使用点运算符来访问该类型的任何可用成员。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;Country&gt; countryAreaQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> country.Area &gt; 500000 <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//sq km</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> country;

</pre></td></tr></table></span></div></div><p>在使用分号或延续子句退出查询之前，范围变量将一直位于范围中。</p><p>查询表达式可以包含多个 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句。当源序列中的每个元素本身就是集合或包含集合时，可使用附加的 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句。例如，假定您具有一个 <span class="code">Country</span> 对象集合，而其中每个对象都包含一个名为 <span class="code">Cities</span> 的 <span class="code">City</span> 对象集合。若要查询每个 <span class="code">Country</span> 中的 <span class="code">City</span> 对象，请使用两个<span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;City&gt; cityQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> country.Cities
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &gt; 10000
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city;

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见 <span sdata="link"><a href="1aefd18c-1314-47f8-99ec-9bcefb09e699.htm">from 子句（C# 参考）</a></span>。</p></div><h3 class="subHeading">结束查询表达式</h3><div class="subsection"><p>查询表达式必须以 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 子句结尾。</p><h4 class="subHeading">group 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 子句可产生按照指定的键组织的组序列。键可以采用任何数据类型。例如，下面的查询创建一个组序列，该序列包含一个或多个 <span class="code">Country</span> 对象，并且它的键是字符串值。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> queryCountryGroups =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">group</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">by</span> country.Name[0];

</pre></td></tr></table></span></div></div><p>有关分组的更多信息，请参见 <span sdata="link"><a href="c817242e-b12c-4baa-a57e-73ee138f34d1.htm">group 子句（C# 参考）</a></span>。</p></div><h4 class="subHeading">select 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句可产生所有其他类型的序列。简单的 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句只是产生与数据源中包含的对象具有相同类型的对象的序列。在此示例中，数据源包含 <span class="code">Country</span> 对象。<span sdata="langKeyword" value="orderby"><span class="keyword">orderby</span></span> 子句只是将元素重新排序，而 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句则产生重新排序的 <span class="code">Country</span> 对象的序列。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;Country&gt; sortedQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> country.Area
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> country;

</pre></td></tr></table></span></div></div><p>可以使用 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句将源数据转换为新类型的序列。这一转换也称为“投影”。在下面的示例中，<span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句对一个匿名类型序列进行投影，该序列仅包含原始元素中各字段的子集。请注意，新对象是使用对象初始值设定项初始化的。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Here var is required because the query</span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// produces an anonymous type.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> queryNameAndPop =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> { Name = country.Name, Pop = country.Population };

</pre></td></tr></table></span></div></div><p>有关使用 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 子句转换源数据的所有方式的更多信息，请参见 <span sdata="link"><a href="df01e266-5781-4aaa-80c4-67cf28ea093f.htm">select 子句（C# 参考）</a></span>。</p></div><h4 class="subHeading">使用“into”进行延续</h4><div class="subsection"><p>可以在 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 子句中使用 <span sdata="langKeyword" value="into"><span class="keyword">into</span></span> 关键字来创建用于存储查询的临时标识符。当您必须在分组或选择操作之后对查询执行附加查询操作时，需要这样做。在下面的示例中，以一千万人口范围为界对 <span class="code">countries</span> 进行分组。在创建这些组之后，使用附加子句筛选掉某些组，然后按升序对剩下的组进行排序。若要执行这些附加操作，需要使用由 <span class="code">countryGroup</span> 表示的延续。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// percentileQuery is an IEnumerable&lt;IGrouping&lt;int, Country&gt;&gt;</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> percentileQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">let</span> percentile = (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>) country.Population / 10000000
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">group</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">by</span> percentile <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">into</span> countryGroup
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> countryGroup.Key &gt;= 20
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> countryGroup.Key
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> countryGroup;

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// grouping is an IGrouping&lt;int, Country&gt;</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> grouping <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> percentileQuery)
{
    Console.WriteLine(grouping.Key);
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> grouping)
        Console.WriteLine(country.Name + <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">":"</span> + country.Population);
}

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见 <span sdata="link"><a href="81ec62c1-f0b1-4755-8a31-959876e77f65.htm">into（C# 参考）</a></span>。</p></div></div><h3 class="subHeading">筛选、排序和联接</h3><div class="subsection"><p>在 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 开始子句以及 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 结束子句之间，所有其他子句（<span sdata="langKeyword" value="where"><span class="keyword">where</span></span>、<span sdata="langKeyword" value="join"><span class="keyword">join</span></span>、<span sdata="langKeyword" value="orderby"><span class="keyword">orderby</span></span>、<span sdata="langKeyword" value="from"><span class="keyword">from</span></span>、<span sdata="langKeyword" value="let"><span class="keyword">let</span></span>）都是可选的。任何可选子句都可以在查询正文中使用零次或多次。</p><h4 class="subHeading">where 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="where"><span class="keyword">where</span></span> 子句可以根据一个或多个谓词表达式筛选掉源数据中的某些元素。以下示例中的 <span sdata="langKeyword" value="where"><span class="keyword">where</span></span> 子句含有两个谓词。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;City&gt; queryCityPop =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> city <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> cities
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> city.Population &lt; 200000 &amp;&amp; city.Population &gt; 100000
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> city;

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见 <span sdata="link"><a href="7f9bf952-7744-4f91-b676-cddb55d107c3.htm">where 子句（C# 参考）</a></span>。</p></div><h4 class="subHeading">orderby 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="orderby"><span class="keyword">orderby</span></span> 子句可以按升序或降序对结果进行排序。您还可以指定次要排序顺序。下面的示例使用 <span class="code">Area</span> 属性对 <span class="code">country</span> 对象执行主要排序，然后使用 <span class="code">Population</span> 属性执行次要排序。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IEnumerable&lt;Country&gt; querySortedCountries =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> country <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> countries
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">orderby</span> country.Area &gt; 500000, country.Population <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">descending</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> country;

</pre></td></tr></table></span></div></div><p><span sdata="langKeyword" value="ascending"><span class="keyword">ascending</span></span> 关键字是可选的；如果未指定顺序，则它是默认排序顺序。有关更多信息，请参见 <span sdata="link"><a href="21f87f48-d69d-4e95-9a52-6fec47b37e1f.htm">orderby 子句（C# 参考）</a></span>。</p></div><h4 class="subHeading">join 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="join"><span class="keyword">join</span></span> 子句可以根据每个元素中指定键之间的相等比较，对一个数据源中的元素与另外一个数据源中的元素进行关联和/或组合。在 LINQ 中，联接操作是针对其元素具有不同类型的对象序列执行的。在联接两个序列之后，必须使用 <span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 或 <span sdata="langKeyword" value="group"><span class="keyword">group</span></span> 语句指定要存储到输出序列中的元素。还可以使用匿名类型将每组关联元素中的属性组合为输出序列的新类型。下面的示例对其 <span class="code">Category</span> 属性与 <span class="code">categories</span> 字符串数组中的某个类别相匹配的 <span class="code">prod</span> 对象进行关联。其 <span class="code">Category</span> 不与 <span class="code">categories</span> 中的任何字符串匹配的产品会被筛选掉。<span sdata="langKeyword" value="select"><span class="keyword">select</span></span> 语句投影了一个新类型，其属性取自 <span class="code">cat</span> 和 <span class="code">prod</span>。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> categoryQuery =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> cat <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> categories
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">join</span> prod <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> products <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">on</span> cat <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">equals</span> prod.Category
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> { Category = cat, Name = prod.Name };

</pre></td></tr></table></span></div></div><p>通过使用 <mshelp:link keywords="81ec62c1-f0b1-4755-8a31-959876e77f65" tabindex="0">into</mshelp:link> 关键字将 <span sdata="langKeyword" value="join"><span class="keyword">join</span></span> 操作的结果存储到临时变量中，还可以执行分组联接。有关更多信息，请参见 <span sdata="link"><a href="76e9df84-092c-41a6-9537-c3f1cbd7f0fb.htm">join 子句（C# 参考）</a></span>。</p></div><h4 class="subHeading">let 子句</h4><div class="subsection"><p>使用 <span sdata="langKeyword" value="let"><span class="keyword">let</span></span> 子句可以将表达式（如方法调用）的结果存储到新的范围变量中。在下面的示例中，范围变量 <span class="code">s</span> 存储了 <span class="code">Split</span> 返回的字符串数组的第一个元素。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] names = { <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Svetlana Omelchenko"</span>, <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Claire O'Donnell"</span>, <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Sven Mortensen"</span>, <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Cesar Garcia"</span> };
IEnumerable&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>&gt; queryFirstNames =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> name <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> names
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">let</span> firstName = name.Split(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">char</span>[] { ' ' })[0]
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> firstName;

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> queryFirstNames)
    Console.Write(s + <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">" "</span>);
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Output: Svetlana Claire Sven Cesar</span>

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见 <span sdata="link"><a href="13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4.htm">let 子句（C# 参考）</a></span>。</p></div></div><h3 class="subHeading">查询表达式中的子查询</h3><div class="subsection"><p>查询子句本身可能包含一个查询表达式，该查询表达式有时称为“子查询”。每个子查询都以它自己的 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句开头，该子句不一定指向第一个 <span sdata="langKeyword" value="from"><span class="keyword">from</span></span> 子句中的同一数据源。例如，下面的查询演示了一个在 select 语句中使用的查询表达式，用来检索分组操作的结果。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> queryGroupMax =
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> student <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> students
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">group</span> student <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">by</span> student.GradeLevel <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">into</span> studentGroup
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span>
    {
        Level = studentGroup.Key,
        HighestScore =
            (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> student2 <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> studentGroup
             <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> student2.Scores.Average())
             .Max()
    };

</pre></td></tr></table></span></div></div><p>有关更多信息，请参见<span sdata="link"><a href="7b0805cd-53b4-429d-86b6-d37fb08f2c95.htm">如何：对分组操作执行子查询（C# 编程指南）</a></span>。</p></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="40638f19-fb46-4d26-a2d9-a383b48f5ed4.htm">LINQ 查询表达式（C# 编程指南）</a></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="609c7a6b-cbdd-429d-99f3-78d13d3bc049" tabindex="0">LINQ 常规编程指南</mshelp:link></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="a73c4aec-5d15-4e98-b962-1274021ea93d" tabindex="0">语言集成查询 (LINQ)</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="6c9bec16-dbd7-4a7c-a060-fe4600b2021f.htm">查询关键字（C# 参考）</a></span></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>