<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>类型（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="类型" />
      <MSHelp:Keyword Index="A" Term="f782d7cc-035e-4500-b1b1-36a9881130ad" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 数据类型" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 类型" />
      <MSHelp:Keyword Index="K" Term="公共类型系统" />
      <MSHelp:Keyword Index="K" Term="数据 [C#], 数据类型" />
      <MSHelp:Keyword Index="K" Term="数据类型 [C#]" />
      <MSHelp:Keyword Index="K" Term="引用类型, C#" />
      <MSHelp:Keyword Index="K" Term="强类型化, C#" />
      <MSHelp:Keyword Index="K" Term="类型 [C#]" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 匿名" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 自定义" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 泛型" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 隐式" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 引用类型" />
      <MSHelp:Keyword Index="K" Term="类型 [C#], 值类型" />
      <MSHelp:Keyword Index="K" Term="值类型 [C#]" />
      <MSHelp:Keyword Index="K" Term="值类型, C#" />
      <MSHelp:Attr Name="RevisionNumber" Value="42" />
      <MSHelp:Attr Name="AssetID" Value="f782d7cc-035e-4500-b1b1-36a9881130ad" />
      <MSHelp:Attr Name="Abstract" Value="&#xD;&#xA;                    C# 是一种强类型语言。每个变量和常量都有一个类型，每个计算为值的表达式也是如此。每个方法签名为每个输入参数和返回值指定一个类型。.NET Framework 类库定义了一组内置数值类型以及表示各种逻辑构造的更复杂的类型，例如文件系统、网络连接、对象的集合和数组及日期。典型 C# 程序使用类库中的类型，还使用为特定于该程序问题域的概念建模的用户定义类型。&#xD;&#xA;                " />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">类型（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="f782d7cc-035e-4500-b1b1-36a9881130ad.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：
                    
    2008 年 7 月
  
                </font></p><div class="introduction" /><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0, event)" tabindex="0"><img id="sectionToggle0" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />类型、变量和值</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>
                    C# 是一种强类型语言。每个变量和常量都有一个类型，每个计算为值的表达式也是如此。每个方法签名为每个输入参数和返回值指定一个类型。.NET Framework 类库定义了一组内置数值类型以及表示各种逻辑构造的更复杂的类型，例如文件系统、网络连接、对象的集合和数组及日期。典型 C# 程序使用类库中的类型，还使用为特定于该程序问题域的概念建模的用户定义类型。
                </p><p>
                    类型中存储的信息可以包括：
                </p><ul><li><p>
                    该类型的变量所需的存储空间。
                </p></li><li><p>
                    该类型可以表示的最大值和最小值。
                </p></li><li><p>
                    该类型包含的成员（方法、字段、事件等）。
                </p></li><li><p>
                    该类型所继承的基类型。
                </p></li><li><p>
                    将在运行时为其分配变量内存的位置。
                </p></li><li><p>
                    允许的运算种类。
                </p></li></ul><p>
                    编译器使用类型信息确保代码中执行的所有运算都是类型安全的。例如，如果声明了一个 <mshelp:link keywords="212447b4-5d2a-41aa-88ab-84fe710bdb52" tabindex="0">int</mshelp:link> 类型的变量，则编译器允许您在加法和减法运算中使用此变量。如果尝试在一个 <mshelp:link keywords="551cfe35-2632-4343-af49-33ad12da08e2" tabindex="0">bool</mshelp:link> 类型的变量上执行相同的运算，则编译器会产生错误，如下面的示例所示：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> a = 5;             
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> b = a + 2; <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//OK</span>

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">bool</span> test = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">true</span>;
 * 
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Error. Operator '+' cannot be applied to operands of type 'int' and 'bool'.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> c = a + test;

</pre></td></tr></table></span></div></div><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" title="说明" src="../icons/alert_note.gif" /><b>说明：</b></th></tr><tr><td><p>请 C 和 C++ 开发人员注意，在 C# 中，<mshelp:link keywords="551cfe35-2632-4343-af49-33ad12da08e2" tabindex="0">bool</mshelp:link> 不能转换为 <mshelp:link keywords="212447b4-5d2a-41aa-88ab-84fe710bdb52" tabindex="0">int</mshelp:link>。</p></td></tr></table></div><p>
                    编译器将类型信息作为元数据嵌入到可执行文件中。公共语言运行时 (CLR) 会在运行时使用该元数据，以进一步确保它在分配和回收内存时类型安全。
                </p><h3 class="subHeading">在变量声明中指定类型</h3><div class="subsection"><p>
                    在程序中声明变量或常量时，必须指定其类型或者使用关键字 <mshelp:link keywords="0777850a-2691-4e3e-927f-0c850f5efe15" tabindex="0">var</mshelp:link> 让编译器可以推断其类型。下面的示例演示了一些使用内置数值类型和复杂的用户定义类型的变量声明：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Declaration only:</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">float</span> temperature;
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> name;
MyClass myClass;

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Declaration with initializers (four examples):</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">char</span> firstLetter = 'C';
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> limit = 3;
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] source = { 0, 1, 2, 3, 4, 5 };
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> query = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">from</span> item <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> source
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> item &lt;= limit
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">select</span> item;

</pre></td></tr></table></span></div></div><p>
                    在方法签名中指定方法参数和返回值的类型。下面的签名中演示的方法需要用 <mshelp:link keywords="212447b4-5d2a-41aa-88ab-84fe710bdb52" tabindex="0">int</mshelp:link> 作为输入参数并返回一个字符串：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> GetName(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> ID)
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">if</span> (ID &lt; names.Length)
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> names[ID];
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">else</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> String.Empty;
}
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">private</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] names = { <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Spencer"</span>, <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Sally"</span>, <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Doug"</span> };

</pre></td></tr></table></span></div></div><p>
                    声明了一个变量后，不能使用新类型重新对它进行声明，也不能向它赋与它的声明类型不兼容的值。例如，不能声明 <mshelp:link keywords="212447b4-5d2a-41aa-88ab-84fe710bdb52" tabindex="0">int</mshelp:link>，然后向它赋予布尔值 <mshelp:link keywords="7e36d493-1acf-460d-9258-a6d76c6b5a3a" tabindex="0">true</mshelp:link>。但是，值可以转换为其他类型，例如将值赋给新变量或者作为方法参数传递时。编译器会自动执行不会导致数据丢失的类型转换。可能导致数据丢失的转换需要源代码内有强制转换。
                </p><p>
                    有关更多信息，请参见<span sdata="link"><a href="568df58a-d292-4b55-93ba-601578722878.htm">强制转换和类型转换（C# 编程指南）</a></span>。
                </p></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1, event)" tabindex="0"><img id="sectionToggle1" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />内置类型</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>
                    C# 提供了一组标准的内置数值类型，用来表示整数、浮点值、布尔表达式、文本字符、十进制值和其他数据类型。还有内置的 <span sdata="langKeyword" value="string"><span class="keyword">string</span></span> 和 <span sdata="langKeyword" value="object"><span class="keyword">object</span></span> 类型。您可以在任何 C# 程序中使用这些类型。有关内置类型的更多信息，请参见<span sdata="link"><a href="1d2b6a9b-31fd-4fa6-a7b2-bfd9c806ac8a.htm">类型参考表（C# 参考）</a></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle2)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle2, event)" tabindex="0"><img id="sectionToggle2" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />自定义类型</span></h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>
                    您可以使用 <mshelp:link keywords="ff3dd9b7-dc93-4720-8855-ef5558f65c7c" tabindex="0">struct</mshelp:link>、<mshelp:link keywords="b95d8815-de18-4c3f-a8cc-a0a53bdf8690" tabindex="0">class</mshelp:link>、<mshelp:link keywords="7da38e81-4f99-4bc5-b07d-c986b687eeba" tabindex="0">interface</mshelp:link> 和 <mshelp:link keywords="bbeb9a0f-e9b3-41ab-b0a6-c41b1a08974c" tabindex="0">enum</mshelp:link> 结构创建自己的自定义类型。.NET Framework 类库本身是 Microsoft 提供的自定义类型的集合，您可以在自己的应用程序中使用它们。默认情况下，类库中最常用的类型在所有 C# 程序中均可用。而对于其他类型，则仅当您显式添加定义这些类型的程序集的项目引用后它们才可用。编译器拥有对该程序集的引用后，才可以在源代码中声明在该程序集中声明的类型的变量（和常量）。有关更多信息，请参见 <span sdata="link"><mshelp:link keywords="6c4f3a62-6a0f-41f2-9d52-ee0b13686f29" tabindex="0">.NET Framework 类库</mshelp:link></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle3)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle3, event)" tabindex="0"><img id="sectionToggle3" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />通用类型系统</span></h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>
                    请务必了解有关 .NET Framework 中的类型系统的以下两个基本点：
                </p><ul><li><p>
                    它支持继承原则。类型可从称为基类型的其他类型派生。派生类型继承基类型的方法、属性和其他成员（存在一些限制）。之后，基类型可从某些其他类型派生，这种情况下，派生类型继承其层次结构中这两个基类型的成员。包括如 <span sdata="cer" target="T:System.Int32"><mshelp:link keywords="T:System.Int32" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Int32</mshelp:link></span>（C# 关键字：<mshelp:link keywords="212447b4-5d2a-41aa-88ab-84fe710bdb52" tabindex="0">int</mshelp:link>）等内置数值类型在内的所有类型，最终都是从一个基类派生得到的，该基类即 <span sdata="cer" target="T:System.Object"><mshelp:link keywords="T:System.Object" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</mshelp:link></span> （C# 关键字：<mshelp:link keywords="93f60c0b-e17a-40a9-9362-cca5fb77b0e7" tabindex="0">object</mshelp:link>）。这种统一的类型层次结构称为<span sdata="link"><mshelp:link keywords="53c57c96-83e1-4ee3-9543-9ac832671a89" tabindex="0">通用类型系统</mshelp:link></span> (CTS)。有关 C# 中的继承的更多信息，请参见<span sdata="link"><a href="81d64ee4-50f9-4d6c-a8dc-257c348d2eea.htm">继承（C# 编程指南）</a></span>。
                </p></li><li><p>
                    CTS 中的每一个类型都被定义成了值类型或引用类型。这包括 .NET Framework 类库中的所有自定义类型以及您自己的用户定义类型。使用关键字 <mshelp:link keywords="ff3dd9b7-dc93-4720-8855-ef5558f65c7c" tabindex="0">struct</mshelp:link> 定义的类型是值类型；所有内置数值类型都是 <span sdata="langKeyword" value="structs"><span class="keyword">structs</span></span>。使用关键字 <mshelp:link keywords="b95d8815-de18-4c3f-a8cc-a0a53bdf8690" tabindex="0">class</mshelp:link> 定义的类型是引用类型。引用类型和值类型有不同的编译时规则和不同的运行时行为。
                </p></li></ul><p>
                    下图演示了 CTS 中的值类型和引用类型之间的关系。
                </p><span class="media"><div class="caption">CTS 中的值类型和引用类型</div><br /><img alt="值类型和引用类型" src="../art/ValueTypesCTS.png" /></span><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" title="说明" src="../icons/alert_note.gif" /><b>说明：</b></th></tr><tr><td><p>可以看到，最常用的类型都组织到了 <span sdata="cer" target="N:System"><mshelp:link keywords="N:System" tabindex="0">System</mshelp:link></span> 命名空间。但是，类型所在的命名空间与类型是值类型还是引用类型没有关系。</p></td></tr></table></div><h3 class="subHeading">值类型</h3><div class="subsection"><p>
                    值类型是从派生自 <span sdata="cer" target="T:System.Object"><mshelp:link keywords="T:System.Object" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</mshelp:link></span> 的 <span sdata="cer" target="T:System.ValueType"><mshelp:link keywords="T:System.ValueType" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ValueType</mshelp:link></span> 派生的。派生自 <span sdata="cer" target="T:System.ValueType"><mshelp:link keywords="T:System.ValueType" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ValueType</mshelp:link></span> 的类型在 CLR 中有特殊行为。值类型变量直接包含它们的值，这意味着内存在声明变量的任意上下文中都是以内联方式分配的。值类型变量没有单独的堆分配或垃圾回收开销。
                </p><p>
                    值类型分为两个类别：<mshelp:link keywords="ff3dd9b7-dc93-4720-8855-ef5558f65c7c" tabindex="0">struct</mshelp:link> 和 <mshelp:link keywords="bbeb9a0f-e9b3-41ab-b0a6-c41b1a08974c" tabindex="0">enum</mshelp:link>。
                </p><p>
                    内置数值类型是结构，它们具有可以访问的属性和方法。
                </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>// Static method on type Byte.
byte b = Byte.MaxValue();</pre></td></tr></table></span></div><p>
                    但是，您可以声明它们并向它们赋值，就如同它们是简单的非聚合类型一样：
                </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>byte num = 0xA;
int i = 5;
char c = 'Z';</pre></td></tr></table></span></div><p>
                    例如，值类型是密封的，这意味着您不能从 <span sdata="cer" target="T:System.Int32"><mshelp:link keywords="T:System.Int32" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Int32</mshelp:link></span> 派生类型，并且不能定义一个结构以便从任何用户定义的类或结构继承，因为结构只能从 <span sdata="cer" target="T:System.ValueType"><mshelp:link keywords="T:System.ValueType" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ValueType</mshelp:link></span> 继承。但是，一个结构可以实现一个或更多个接口。可以将结构类型强制转换为接口类型；但这会使装箱操作在托管堆上的一个引用类型对象内包装该结构。在将值类型传递给将 <span sdata="cer" target="T:System.Object"><mshelp:link keywords="T:System.Object" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</mshelp:link></span> 作为输入参数的方法时会发生装箱操作。有关更多信息，请参见<span sdata="link"><a href="8da9bbf4-bce9-4b08-b2e5-f64c11c56514.htm">装箱和取消装箱（C# 编程指南）</a></span>。
                </p><p>
                    可以使用 <mshelp:link keywords="ff3dd9b7-dc93-4720-8855-ef5558f65c7c" tabindex="0">struct</mshelp:link> 关键字创建自己的自定义值类型。通常，结构可作为一小组相关变量的容器，如下面的示例所示：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">struct</span> CoOrds
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> x, y;

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> CoOrds(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> p1, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> p2)
    {
        x = p1;
        y = p2;
    }
}

</pre></td></tr></table></span></div></div><p>
                    有关结构的更多信息，请参见<span sdata="link"><a href="b7cf4ff2-0eb7-4e5c-93d5-b2196b4f5d89.htm">结构（C# 编程指南）</a></span>。有关 .NET Framework 中的值类型的更多信息，请参见<span sdata="link"><mshelp:link keywords="c9c567f8-8ab1-4d88-834d-00f7d92418de" tabindex="0">通用类型系统中的值类型</mshelp:link></span>。
                </p><p>
                    另一类值类型是 <mshelp:link keywords="bbeb9a0f-e9b3-41ab-b0a6-c41b1a08974c" tabindex="0">enum</mshelp:link>。枚举定义一组已命名的整数常量。例如，.NET Framework 类库中的 <span sdata="cer" target="T:System.IO.FileMode"><mshelp:link keywords="T:System.IO.FileMode" tabindex="0">System.IO<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>FileMode</mshelp:link></span> 枚举包含一组已命名的整数常量，用来指定应如何打开文件。其定义方式如下面的示例所示：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">enum</span> FileMode
{
    CreateNew = 1,
    Create = 2,
    Open = 3,
    OpenOrCreate = 4,
    Truncate = 5,
    Append = 6,
}

</pre></td></tr></table></span></div></div><p>
                    <span sdata="cer" target="F:System.IO.FileMode.Create"><mshelp:link keywords="F:System.IO.FileMode.Create" tabindex="0">Create</mshelp:link></span> 常量具有值 2。但是，在阅读源代码时，名称可为人们提供更多信息，因此最好使用枚举而不使用常量文本数字。
                </p><p>
                    所有枚举均是从继承自 <span sdata="cer" target="T:System.ValueType"><mshelp:link keywords="T:System.ValueType" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ValueType</mshelp:link></span> 的 <span sdata="cer" target="T:System.Enum"><mshelp:link keywords="T:System.Enum" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Enum</mshelp:link></span> 继承的。所有适用于结构的规则同样也适用于枚举。有关枚举的更多信息，请参见<span sdata="link"><a href="64a9b731-9e3c-4336-8a09-018db2aa10b7.htm">枚举类型（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">引用类型</h3><div class="subsection"><p>
                    定义为<mshelp:link keywords="b95d8815-de18-4c3f-a8cc-a0a53bdf8690" tabindex="0">类</mshelp:link>、<mshelp:link keywords="0bb8cb6d-2f87-47c7-9d1f-d65c1cd01e9f" tabindex="0">委托</mshelp:link>、数组或<mshelp:link keywords="7da38e81-4f99-4bc5-b07d-c986b687eeba" tabindex="0">接口</mshelp:link>的类型是引用类型。在运行时，当您声明引用类型的变量时，该变量会一直包含值 <mshelp:link keywords="fecb1c60-6232-4efe-87f7-9a86ba2e9119" tabindex="0">null</mshelp:link>，直至您使用 <mshelp:link keywords="e4136516-f058-45a8-84e5-da00a5cf9b6a" tabindex="0">new</mshelp:link> 运算符显式创建对象的实例，或者为该变量分配已经使用 <span sdata="langKeyword" value="new, as shown in the following example:"><span class="keyword">new, as shown in the following example:</span></span> 在其他位置创建的对象
                </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>MyClass mc = new MyClass();
MyClass mc2 = mc;</pre></td></tr></table></span></div><p>
                    接口必须与实现它的类对象一起初始化。如果 <span class="code">MyClass</span> 实现 <span class="code">IMyInterface</span>，则您创建了 <span class="code">IMyInterface</span> 的实例，如下面的示例所示：
                </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>IMyInterface iface = new MyClass();</pre></td></tr></table></span></div><p>
                    创建对象时，将在托管堆上分配内存，变量只保存对对象位置的引用。对于托管堆上的类型，在 CLR 的自动内存管理功能（称为“垃圾回收”）对它们进行分配和回收时都需要系统开销。但是，也对垃圾回收进行了高度优化，在大多数情况下它不会引起性能问题。有关垃圾回收的更多信息，请参见<span sdata="link"><mshelp:link keywords="d4850de5-fa63-4936-a250-5678d118acba" tabindex="0">自动内存管理</mshelp:link></span>。
                </p><p>
                    所有数组都是引用类型，即使其元素是值类型也不例外。数组是从 <span sdata="cer" target="T:System.Array"><mshelp:link keywords="T:System.Array" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Array</mshelp:link></span> 类隐式派生的，但可以通过 C# 提供的简化语法来声明和使用它们，如下面的示例所示：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Declare and initialize an array of integers.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] nums = { 1, 2, 3, 4, 5 };

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Access an instance property of System.Array.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> len = nums.Length;

</pre></td></tr></table></span></div></div><p>
                    引用类型完全支持继承。创建类时，可以从没有定义为 <mshelp:link keywords="8e4ed5d3-10be-47db-9488-0da2008e6f3f" tabindex="0">sealed</mshelp:link> 的任何其他接口或类继承，而其他类则可以从您创建的类继承并重写虚方法。有关如何创建自己的类的更多信息，请参见<span sdata="link"><a href="cc39dbda-8754-423e-b5b1-16a1db0734c0.htm">类和结构（C# 编程指南）</a></span>。有关继承和虚方法的更多信息，请参见<span sdata="link"><a href="81d64ee4-50f9-4d6c-a8dc-257c348d2eea.htm">继承（C# 编程指南）</a></span>。
                </p></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle4)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle4, event)" tabindex="0"><img id="sectionToggle4" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />文本值类型</span></h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>
                    在 C# 中，文本值从编译器接收类型。您可以通过在数字末尾追加一个字母来指定应如何类型化该数字文本。例如，若要指定应按浮点数来处理值 4.56，则在该数字后追加一个“f”或“F”：<span class="code">4.56f</span>。如果没有追加字母，则编译器将为该文本推断一个类型。有关可以使用字母后缀指定的类型的更多信息，请参见<span sdata="link"><a href="471eb994-2958-49d5-a6be-19b4313f80a3.htm">值类型（C# 参考）</a></span>中各个类型的参考页。
                </p><p>
                    由于文本已类型化，且所有类型最终都是从 <span sdata="cer" target="T:System.Object"><mshelp:link keywords="T:System.Object" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Object</mshelp:link></span> 派生，因此您可以编写和编译如下所示的代码：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s = <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"The answer is "</span> + 5.ToString();
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Outputs: </span><span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"The answer is 5"</span>
Console.WriteLine(s);

Type type = 12345.GetType();
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Outputs: </span><span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"System.Int32"</span>
Console.WriteLine(type);

</pre></td></tr></table></span></div></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle5)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle5, event)" tabindex="0"><img id="sectionToggle5" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />泛型类型</span></h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>
                    一个类型可以通过一个或多个类型参数声明，而这些类型参数作为客户端代码在创建该类型的实例时提供的实际类型（具体类型）的占位符。这种类型称为“泛型类型”。例如，.NET Framework 类型 <span sdata="cer" target="T:System.Collections.Generic.List`1"><mshelp:link keywords="T:System.Collections.Generic.List`1" tabindex="0">System.Collections.Generic<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>List<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 有一个类型参数，按照约定该类型参数的名称为 T。在创建该类型的实例时，会指定列表将包含的对象的类型，例如字符串：
                </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>List&lt;string&gt; strings = new List&lt;string&gt;();</pre></td></tr></table></span></div><p>
                    使用类型参数便可以重复使用相同的类存放任意类型的元素，而不必将每个元素都转换为<mshelp:link keywords="93f60c0b-e17a-40a9-9362-cca5fb77b0e7" tabindex="0">对象</mshelp:link>。泛型集合类称为“强类型集合”，因为编译器知道集合中元素的特定类型，举例来说，如果尝试向上面示例中的 <span class="code">strings</span> 对象添加整数，编译器会在编译时引发错误。有关更多信息，请参见<span sdata="link"><a href="75ea8509-a4ea-4e7a-a2b3-cf72482e9282.htm">泛型（C# 编程指南）</a></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle6)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle6, event)" tabindex="0"><img id="sectionToggle6" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />隐式类型、匿名类型和可以为 null 的类型</span></h1><div id="sectionSection6" class="section" name="collapseableSection" style=""><p>
                    如前面所述，您可以使用关键字 <mshelp:link keywords="0777850a-2691-4e3e-927f-0c850f5efe15" tabindex="0">var</mshelp:link> 隐式类型化一个局部变量（非类成员）。该变量在编译时仍然会接收一个类型，但该类型是由编译器提供的。有关更多信息，请参见<span sdata="link"><a href="b9218fb2-ef5d-4814-8a8e-2bc29b0bbc9b.htm">隐式类型的局部变量（C# 编程指南）</a></span>。
                </p><p>
                    某些情况下为相关值的简单集合创建命名类型是不方便的，因为这些相关值不准备在方法边界外存储或传递。可以创建匿名类型来实现此目的。有关更多信息，请参见 <span sdata="link"><a href="59c9d7a4-3b0e-475e-b620-0ab86c088e9b.htm">匿名类型（C# 编程指南）</a></span>。
                </p><p>
                    普通的值类型不能有 <mshelp:link keywords="fecb1c60-6232-4efe-87f7-9a86ba2e9119" tabindex="0">null</mshelp:link> 值。但是，可以通过在类型后面附加 <span sdata="langKeyword" value="?"><span class="keyword">?</span></span> 来创建可以为 null 值的类型。例如，<span sdata="langKeyword" value="int?"><span class="keyword">int?</span></span> 是一个也可以具有 <mshelp:link keywords="fecb1c60-6232-4efe-87f7-9a86ba2e9119" tabindex="0">null</mshelp:link> 值的 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 类型。在 CTS 中，可以为 null 的类型是泛型结构类型 <span sdata="cer" target="T:System.Nullable`1"><mshelp:link keywords="T:System.Nullable`1" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Nullable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 的实例。在向其数值可能为 null 的数据库传入数据和从中传出数据时，可以为 null 的类型尤其有用。有关更多信息，请参见<span sdata="link"><a href="e473cb01-28ca-42be-9cea-f717055d72c6.htm">可空类型（C# 编程指南）</a></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle7)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle7, event)" tabindex="0"><img id="sectionToggle7" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />相关章节</span></h1><div id="sectionSection7" class="section" name="collapseableSection" style=""><p>
                    有关更多信息，请参见下列主题：
                </p><ul><li><p>
                    <span sdata="link"><a href="568df58a-d292-4b55-93ba-601578722878.htm">强制转换和类型转换（C# 编程指南）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="8da9bbf4-bce9-4b08-b2e5-f64c11c56514.htm">装箱和取消装箱（C# 编程指南）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="471eb994-2958-49d5-a6be-19b4313f80a3.htm">值类型（C# 参考）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="801cf030-6e2d-4a0d-9daf-1431b0c31f47.htm">引用类型（C# 参考）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="cc39dbda-8754-423e-b5b1-16a1db0734c0.htm">类和结构（C# 编程指南）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="59c9d7a4-3b0e-475e-b620-0ab86c088e9b.htm">匿名类型（C# 编程指南）</a></span>
                </p></li><li><p>
                    <span sdata="link"><a href="75ea8509-a4ea-4e7a-a2b3-cf72482e9282.htm">泛型（C# 编程指南）</a></span>
                </p></li></ul></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle8)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle8, event)" tabindex="0"><img id="sectionToggle8" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />C# 语言规范</span></h1><div id="sectionSection8" class="section" name="collapseableSection" style=""><p>
                    有关类型的更多信息，请参见 <span sdata="link"><a href="e5d5a5cc-636b-4bff-b9c8-a8edc6207c22.htm">C# 语言规范</a></span>中的以下各章节：
                </p><ul><li><p>
                    1.3 类型和变量
                </p></li><li><p>
                    3.8 命名空间和类型名称
                </p></li><li><p>
                    4.1 值类型
                </p></li><li><p>
                    4.2 引用类型
                </p></li><li><p>
                    4.3 装箱和取消装箱
                </p></li></ul></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="a2aa99ba-8239-4818-9281-f1d72ee40bde" tabindex="0">XML 数据类型的转换</mshelp:link></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="946cb262-5c1d-4807-a833-140022e6e6db" tabindex="0">不同语言的数据类型比较</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="62e86126-46ff-40b0-9028-e61d7558268c.htm">整型表（C# 参考）</a></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><span sdata="link"><a href="06de3167-c16c-4e1a-b3c5-c27841d4569a.htm">C# 参考</a></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(changeHistoryToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(changeHistoryToggle, event)" tabindex="0"><img id="changeHistoryToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />修订记录</span></h1><div id="changeHistorySection" class="section" name="collapseableSection" style=""><div class="caption"></div><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>
                    日期
                </p></th><th><p>
                    历史记录
                </p></th><th><p>
                    原因
                </p></th></tr><tr><td><p>
                    
    <p>2008 年 7 月</p>
  
                </p></td><td><p>
                    增加了介绍性信息及有关类型声明、通用类型系统、值类型和引用类型、文本和泛型类型的信息。
                </p></td><td><p>
                    
    <p>信息补充。</p>
  
                </p></td></tr></table></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>