<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>C#（针对 C++ 开发人员）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:Keyword Index="A" Term="2b1680f8-4718-4b9d-ac48-849c8324dceb" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 与 C++ 比较" />
      <MSHelp:Keyword Index="K" Term="比较 C# 与 C++" />
      <MSHelp:Keyword Index="K" Term="Visual C#, 与 C++ 比较" />
      <MSHelp:Attr Name="RevisionNumber" Value="18" />
      <MSHelp:Attr Name="AssetID" Value="2b1680f8-4718-4b9d-ac48-849c8324dceb" />
      <MSHelp:Attr Name="Abstract" Value="下表包含 C# 和本机 C++（它不使用 /clr）之间的重要比较信息。如果您是一位 C++ 程序员，此表将为您提供这两种语言的最重要差异。" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="CurrentDebugFrameLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">Visual C# 语言概念</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">C#（针对 C++ 开发人员）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="2b1680f8-4718-4b9d-ac48-849c8324dceb.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>下表包含 C# 和本机 C++（它不使用 <b>/clr</b>）之间的重要比较信息。如果您是一位 C++ 程序员，此表将为您提供这两种语言的最重要差异。</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" title="说明" src="../icons/alert_note.gif" /><b>说明：</b></th></tr><tr><td><p>C++ 和 C# 项目是从不同的项目模型派生的。有关 C++ 和 C# 项目之间差异的更多信息，请参见<mshelp:link keywords="762e606b-7f44-4b66-97a1-e30a703654a0" tabindex="0">项目中的项管理</mshelp:link>和<mshelp:link keywords="fc548150-2c52-456d-b43b-b4011b8d9de7" tabindex="0">使用解决方案资源管理器</mshelp:link>。</p></td></tr></table></div><div class="caption"></div><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>功能</p></th><th><p>参考主题</p></th></tr><tr><td><p>继承：在 C++ 中，类和结构实际上是相同的，而在 C# 中，它们很不一样。C# 类可以实现任意数量的接口，但只能从一个基类继承。而且，C# 结构不支持继承，也不支持显式默认构造函数（默认情况下提供一个）。</p></td><td><p><mshelp:link keywords="B95D8815-DE18-4C3F-A8CC-A0A53BDF8690" tabindex="0">类</mshelp:link></p><p><mshelp:link keywords="7DA38E81-4F99-4BC5-B07D-C986B687EEBA" tabindex="0">接口</mshelp:link></p><p><span sdata="link"><a href="ff3dd9b7-dc93-4720-8855-ef5558f65c7c.htm">struct（C# 参考）</a></span></p></td></tr><tr><td><p>数组：在 C++ 中，数组只是一个指针。在 C# 中，数组是包含方法和属性的对象。例如，可通过 <span sdata="cer" target="P:System.Array.Length"><mshelp:link keywords="P:System.Array.Length" tabindex="0">Length</mshelp:link></span> 属性查询数组的大小。C# 数组还使用<span class="term">索引器</span>（验证用于访问数组的各个索引）。声明 C# 数组的语法不同于声明 C++ 数组的语法：在 C# 中，“[]”标记出现在数组类型之后，而非变量之后。</p></td><td><p><span sdata="link"><a href="bb79bdde-e570-4c30-adb0-1dd5759ae041.htm">数组（C# 编程指南）</a></span></p><p><span sdata="link"><a href="022cd27d-d5e0-4cfe-8b97-dc018cc3355d.htm">索引器（C# 编程指南）</a></span></p></td></tr><tr><td><p>布尔值：在 C++ 中，<span sdata="langKeyword" value="bool"><span class="keyword">bool</span></span> 类型实质上是一个整数。在 C# 中，不存在 <span sdata="langKeyword" value="bool"><span class="keyword">bool</span></span> 类型与其他类型之间的相互转换。</p></td><td><p><mshelp:link keywords="551CFE35-2632-4343-AF49-33AD12DA08E2" tabindex="0">bool</mshelp:link></p></td></tr><tr><td><p><span sdata="langKeyword" value="long"><span class="keyword">long</span></span> 类型：<span sdata="langKeyword" value="long"><span class="keyword">long</span></span> 类型在 C# 中为 64 位，而在 C++ 中为 32 位。</p></td><td><p><mshelp:link keywords="F9B24319-1F39-48BE-A42B-D528EE28A7FD" tabindex="0">long</mshelp:link></p></td></tr><tr><td><p>传递参数：在 C++ 中，除非显式通过指针或引用传递，否则所有变量都通过值传递。在 C# 中，除非显式通过具有 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> 或 <span sdata="langKeyword" value="out"><span class="keyword">out</span></span> 参数修饰符的引用传递，否则类通过引用传递，而结构通过值传递。</p></td><td><p><mshelp:link keywords="FF3DD9B7-DC93-4720-8855-EF5558F65C7C" tabindex="0">结构</mshelp:link></p><p><mshelp:link keywords="B95D8815-DE18-4C3F-A8CC-A0A53BDF8690" tabindex="0">类</mshelp:link></p><p><span sdata="link"><a href="b8a5e59c-907d-4065-b41d-95bf4273c0bd.htm">ref（C# 参考）</a></span></p><p><span sdata="link"><a href="7e911a0c-3f98-4536-87be-d539b7536ca8.htm">out（C# 参考）</a></span></p></td></tr><tr><td><p><span sdata="langKeyword" value="switch"><span class="keyword">switch</span></span> 语句：与 C++ 中的 <span sdata="langKeyword" value="switch"><span class="keyword">switch</span></span> 语句不同，C# 不支持从一个 case 标签贯穿到另一个 case 标签。</p></td><td><p><mshelp:link keywords="44BAE8B8-8841-4D85-826B-8A94277DAECB" tabindex="0">switch</mshelp:link></p></td></tr><tr><td><p>委托：C# 委托大致类似于 C++ 中的函数指针，是类型安全和可靠的。</p></td><td><p><mshelp:link keywords="0BB8CB6D-2F87-47C7-9D1F-D65C1CD01E9F" tabindex="0">委托</mshelp:link></p></td></tr><tr><td><p>基类方法：C# 支持用于调用派生类中重写基类成员的 <span sdata="langKeyword" value="base"><span class="keyword">base</span></span> 关键字。而且，在 C# 中，使用 <span sdata="langKeyword" value="override"><span class="keyword">override</span></span> 关键字重写虚拟或抽象方法是显式的。</p></td><td><p><mshelp:link keywords="8B645DBE-1A33-49B8-8716-1C401F9A5EA5" tabindex="0">base</mshelp:link></p><p>请参见 <mshelp:link keywords="DD1907A8-ACF8-46D3-80B9-C2CA4FEBADA8" tabindex="0">override</mshelp:link> 的示例</p></td></tr><tr><td><p>方法隐藏：C++ 通过继承支持方法的隐式“隐藏”。在 C# 中，必须使用 <span sdata="langKeyword" value="new"><span class="keyword">new</span></span> 修饰符来显式隐藏继承的成员。</p></td><td><p><mshelp:link keywords="E4136516-F058-45A8-84E5-DA00A5CF9B6A" tabindex="0">new</mshelp:link></p></td></tr><tr><td><p>预处理器指令用于条件编译。C# 中不使用头文件。</p></td><td><p><mshelp:link keywords="F2406090-B244-4F7E-AB72-3698FEFED724" tabindex="0">C# 预处理器指令</mshelp:link></p></td></tr><tr><td><p>异常处理：C# 为无论是否引发异常都应执行的代码提供 <span sdata="langKeyword" value="finally"><span class="keyword">finally</span></span> 关键字。</p></td><td><p><mshelp:link keywords="C27623FB-7261-4464-862C-7A369D3C8F0A" tabindex="0">try-finally</mshelp:link></p><p><mshelp:link keywords="A1B443B0-FF7A-43AB-B835-0CC9BFBD15CA" tabindex="0">try-catch-finally</mshelp:link></p></td></tr><tr><td><p>C# 运算符：C# 支持其他运算符，如 <span sdata="langKeyword" value="is"><span class="keyword">is</span></span> 和 <span sdata="langKeyword" value="typeof"><span class="keyword">typeof</span></span>。它还引入了某些逻辑运算符的不同功能。</p></td><td><p><mshelp:link keywords="AFA346D5-90EC-4B1F-A2C8-3881F018741D" tabindex="0">&amp; 运算符</mshelp:link></p><p><mshelp:link keywords="82D6BB78-54C8-40BF-B679-531180DDAF70" tabindex="0">| 运算符</mshelp:link></p><p><mshelp:link keywords="B09BC815-570F-4DB6-A637-5B4ED99D014A" tabindex="0">^ 运算符</mshelp:link></p><p><mshelp:link keywords="BC62316A-D41F-4F90-8300-C6F4F0556E43" tabindex="0">is</mshelp:link></p><p><mshelp:link keywords="0C08D880-515E-46BB-8CD2-48B8DD62C08D" tabindex="0">typeof</mshelp:link></p></td></tr><tr><td><p><span sdata="langKeyword" value="typedef"><span class="keyword">typedef</span></span> 关键字。在 C++ 中，typedef 用于为已声明的类型创建更短或更方便的名称。在 C# 中，<span sdata="langKeyword" value="using"><span class="keyword">using</span></span> 指令提供此功能。</p></td><td><p><span sdata="link"><a href="b42b8e61-5e7e-439c-bb71-370094b44ae8.htm">using 指令（C# 参考）</a></span></p></td></tr><tr><td><p><span sdata="langKeyword" value="extern"><span class="keyword">extern</span></span> 关键字：在 C++ 中，<span sdata="langKeyword" value="extern"><span class="keyword">extern</span></span> 用于导入类型。在 C# 中，<span sdata="langKeyword" value="extern"><span class="keyword">extern</span></span> 用于为使用同一程序集的不同版本创建别名。</p></td><td><p><mshelp:link keywords="9C3F02C4-51B8-4D80-9CB2-F2B6E1AE15C7" tabindex="0">extern</mshelp:link></p></td></tr><tr><td><p><span sdata="langKeyword" value="static"><span class="keyword">static</span></span> 关键字：在 C++ 中，<span sdata="langKeyword" value="static"><span class="keyword">static</span></span> 既可用于声明类级实体，也可用于声明特定于某模块的类型。在 C# 中，<span sdata="langKeyword" value="static"><span class="keyword">static</span></span> 仅用于声明类级实体。</p></td><td><p><mshelp:link keywords="5509E215-2183-4DA3-BAB4-6B7E607A4FDF" tabindex="0">static</mshelp:link></p></td></tr><tr><td><p>C# 中的 <span sdata="langKeyword" value="Main"><span class="keyword">Main</span></span> 方法和 C++ 中的 <span sdata="langKeyword" value="main"><span class="keyword">main</span></span> 函数的声明方式不同。在 C# 中，它是大写的，并且始终是 <span sdata="langKeyword" value="static"><span class="keyword">static</span></span> 的。此外，在 C# 中，对处理命令行参数的支持要可靠得多。</p></td><td><p><span sdata="link"><a href="73a17231-cf96-44ea-aa8a-54807c6fb1f4.htm">Main() 和命令行参数（C# 编程指南）</a></span></p></td></tr><tr><td><p>在 C# 中，只有在 <span sdata="langKeyword" value="unsafe"><span class="keyword">unsafe</span></span> 模式下才允许使用指针。</p></td><td><p><mshelp:link keywords="7E818009-1C6E-4B9E-B769-3728A01586A0" tabindex="0">unsafe</mshelp:link></p></td></tr><tr><td><p>在 C# 中以不同的方式执行重载运算符。</p></td><td><p><mshelp:link keywords="0301E31F-22AD-49AF-AC3C-D5EAE7F0AC43" tabindex="0">C# 运算符</mshelp:link></p></td></tr><tr><td><p>字符串：在 C++ 中，字符串只是字符的数组。在 C# 中，字符串是支持可靠搜索方法的对象。</p></td><td><p><mshelp:link keywords="3037E558-FB22-494D-BCA1-A15ADE11B11A" tabindex="0">字符串</mshelp:link></p><p><span sdata="cer" target="T:System.String"><mshelp:link keywords="T:System.String" tabindex="0">String</mshelp:link></span></p></td></tr><tr><td><p><span sdata="langKeyword" value="foreach"><span class="keyword">foreach</span></span> 关键字使您可以循环访问数组和集合。</p></td><td><p><mshelp:link keywords="5A9C5DDC-5FD3-457A-9BB6-9ABFFCD874EC" tabindex="0">foreach，in</mshelp:link></p></td></tr><tr><td><p>全局：在 C# 中，不支持全局方法和全局变量。方法和变量必须包含在 <span sdata="langKeyword" value="class"><span class="keyword">class</span></span> 或 <span sdata="langKeyword" value="struct"><span class="keyword">struct</span></span> 之内。</p></td><td><p><mshelp:link keywords="5AE964A5-0EF0-40FE-88FB-6D1793371D0D" tabindex="0">C# 程序的常规结构</mshelp:link></p></td></tr><tr><td><p><span sdata="langKeyword" value="#define"><span class="keyword">#define</span></span> 预处理指令：在 C++ 中， <span sdata="langKeyword" value="#define"><span class="keyword">#define</span></span> 指令通常用于声明常量值。在 C# 中，<span sdata="langKeyword" value="#define"><span class="keyword">#define</span></span> 指令不可用于此目的。在 C# 中，最好将常量定义为枚举类型（仅限整数值）或者定义为类或结构的静态成员。如果具有多个像这样的常量，可以考虑创建一个单独的“Constants”类来保存这些常量。</p></td><td><p><span sdata="link"><a href="5509e215-2183-4da3-bab4-6b7e607a4fdf.htm">static（C# 参考）</a></span></p><p><span sdata="link"><a href="79eb447c-117b-4418-933f-97c50aa472db.htm">const（C# 参考）</a></span></p><p><span sdata="link"><a href="bbeb9a0f-e9b3-41ab-b0a6-c41b1a08974c.htm">enum（C# 参考）</a></span></p></td></tr><tr><td><p>导入类型：在 C++ 中，多个模块公用的类型放置在头文件中。在 C# 中，可通过元数据获取此信息。</p></td><td><p><mshelp:link keywords="124E1A63-2A4B-4132-B269-3B6D8D3EF72D" tabindex="0">using</mshelp:link></p><p><span sdata="link"><mshelp:link keywords="3dd13c5d-a508-455b-8dce-0a852882a5a7" tabindex="0">元数据概述</mshelp:link></span></p></td></tr><tr><td><p>C# 中的局部变量在初始化前不能使用。</p></td><td><p><span sdata="link"><a href="cc738f07-e8cd-4683-9585-9f40c0667c37.htm">方法（C# 编程指南）</a></span></p></td></tr><tr><td><p>内存管理：C++ 语言不提供垃圾回收功能；在进程终止前，未显式释放的内存仍保持已分配的状态。C# 语言提供垃圾回收功能。</p></td><td><p><span sdata="link"><mshelp:link keywords="22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9" tabindex="0">垃圾回收</mshelp:link></span></p></td></tr><tr><td><p>析构函数：C# 具有用于确定地释放非托管资源的不同语法。</p></td><td><p><mshelp:link keywords="1AE6E46D-A4B1-4A49-ABE5-B97F53D9E049" tabindex="0">析构函数</mshelp:link></p><p><span sdata="link"><a href="afc355e6-f0b9-4240-94dd-0d93f17d9fc3.htm">using 语句（C# 参考）</a></span></p></td></tr><tr><td><p>构造函数：与 C++ 类似，如果在 C# 中不提供类构造函数，则为您自动生成一个默认构造函数。该默认构造函数将所有字段初始化为它们的默认值。</p></td><td><p><mshelp:link keywords="24663779-C1E5-4AF4-A942-CA554E4C542D" tabindex="0">实例构造函数</mshelp:link></p><p><mshelp:link keywords="4AF2C1DF-9E3A-48C1-83AC-B192986FC5BC" tabindex="0">默认值表</mshelp:link></p></td></tr><tr><td><p>C# 不支持位域。</p></td><td><p><mshelp:link keywords="6F4B62E3-CC1D-4E5D-BF34-05904104F71A" tabindex="0">C++ 位字段</mshelp:link></p></td></tr><tr><td><p>C# 的输入/输出服务和格式设置依赖于 .NET Framework 的运行库。</p></td><td><p><mshelp:link keywords="AC0F23A2-6BF3-4077-BE99-538AE5FD3BC5" tabindex="0">C# 语言教程</mshelp:link></p><p><mshelp:link keywords="120BA537-4448-4C62-8676-7A8FDD98F496" tabindex="0">格式化数值结果表</mshelp:link></p></td></tr><tr><td><p>在 C# 中，方法参数不能有默认值。如果要获得同样的效果，请使用方法重载。</p></td><td><p><mshelp:link keywords="BE31B194-3DE5-4AAB-B23A-6CF790F940AB" tabindex="0">编译器错误 CS0241</mshelp:link></p></td></tr><tr><td><p>在 C# 中，以类似于 C++ 模板的方式提供用于类型参数化的泛型类型和泛型方法。不过，二者有明显区别。例如，在 C# 中，泛型类型信息在运行时保留。</p></td><td><p><mshelp:link keywords="A1AD761E-42F7-41DD-A62F-452A2DE26B9D" tabindex="0">C# 中的泛型</mshelp:link></p></td></tr><tr><td><p><span sdata="langKeyword" value="as"><span class="keyword">as</span></span> 关键字与标准强制转换类似，不同之处在于：如果转换失败，则返回值为 null，而不是引发异常。这与使用 C++ 中的 <span sdata="langKeyword" value="static_cast"><span class="keyword">static_cast</span></span>（与 <span sdata="langKeyword" value="dynamic_cast"><span class="keyword">dynamic_cast</span></span> 不同，它不执行运行时检查，因此失败时不引发异常）相似。</p></td><td><p><span sdata="link"><a href="a9be126b-cbf4-4990-a70d-d0e1983cad0e.htm">as（C# 参考）</a></span></p></td></tr></table></div><p>有关 C# 和其他编程语言中的关键字之间的比较的更多信息，请参见<mshelp:link keywords="CBCB8496-ECDF-464B-B1C3-FF5F016B992F" tabindex="0">对等语言</mshelp:link>。有关 C# 应用程序的常规结构的信息，请参见 <span sdata="link"><a href="5ae964a5-0ef0-40fe-88fb-6d1793371d0d.htm">C# 程序的通用结构（C# 编程指南）</a></span>。</p></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="762e606b-7f44-4b66-97a1-e30a703654a0" tabindex="0">项目中的项管理</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="fc548150-2c52-456d-b43b-b4011b8d9de7" tabindex="0">使用解决方案资源管理器</mshelp:link></span></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>