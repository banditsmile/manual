<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>泛型接口（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="泛型接口" />
      <MSHelp:Keyword Index="A" Term="a8fa49a1-6e78-4a09-87e5-84a0b9f5ffbe" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 泛型接口" />
      <MSHelp:Keyword Index="K" Term="泛型 [C#], 接口" />
      <MSHelp:Attr Name="RevisionNumber" Value="25" />
      <MSHelp:Attr Name="AssetID" Value="a8fa49a1-6e78-4a09-87e5-84a0b9f5ffbe" />
      <MSHelp:Attr Name="Abstract" Value="为泛型集合类或表示集合中项的泛型类定义接口通常很有用。对于泛型类，使用泛型接口十分可取，例如使用 T:System.IComparable`1 而不使用 T:System.IComparable，这样可以避免值类型的装箱和取消装箱操作。.NET Framework 类库定义了若干泛型接口，以用于 N:System.Collections.Generic 命名空间中的集合类。" />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="CurrentDebugFrameLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">泛型接口（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="a8fa49a1-6e78-4a09-87e5-84a0b9f5ffbe.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>为泛型集合类或表示集合中项的泛型类定义接口通常很有用。对于泛型类，使用泛型接口十分可取，例如使用 <span sdata="cer" target="T:System.IComparable`1"><mshelp:link keywords="T:System.IComparable`1" tabindex="0">IComparable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 而不使用 <span sdata="cer" target="T:System.IComparable"><mshelp:link keywords="T:System.IComparable" tabindex="0">IComparable</mshelp:link></span>，这样可以避免值类型的装箱和取消装箱操作。.NET Framework 类库定义了若干泛型接口，以用于 <span sdata="cer" target="N:System.Collections.Generic"><mshelp:link keywords="N:System.Collections.Generic" tabindex="0">System.Collections.Generic</mshelp:link></span> 命名空间中的集合类。</p><p>将接口指定为类型参数的约束时，只能使用实现此接口的类型。下面的代码示例显示从 <span class="code">SortedList&lt;T&gt;</span> 类派生的 <span class="code">SortedList&lt;T&gt;</span> 类。有关更多信息，请参见 <span sdata="link"><a href="a1ad761e-42f7-41dd-a62f-452a2de26b9d.htm">泛型介绍（C# 编程指南）</a></span>。<span class="code">SortedList&lt;T&gt;</span> 添加了约束 <span class="code">SortedList&lt;T&gt;</span>。这将使 <span class="code">SortedList&lt;T&gt;</span> 中的 <b>BubbleSort</b> 方法能够对列表元素使用泛型 <span sdata="cer" target="M:System.IComparable`1.CompareTo(`0)"><mshelp:link keywords="M:System.IComparable`1.CompareTo(`0)" tabindex="0">CompareTo</mshelp:link></span> 方法。在此示例中，列表元素为简单类，即实现 <span class="code">Person</span> 的 <span class="code">Person</span>。</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Type parameter T in angle brackets.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> GenericList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">protected</span> Node head;
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">protected</span> Node current = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>;

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Nested class is also generic on T</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">protected</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Node
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> Node next;
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">private</span> T data;  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//T as private member datatype</span>

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> Node(T t)  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//T used in non-generic constructor</span>
        {
            next = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>;
            data = t;
        }

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> Node Next
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">get</span> { <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> next; }
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">set</span> { next = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">value</span>; }
        }

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> T Data  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//T as return type of property</span>
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">get</span> { <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> data; }
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">set</span> { data = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">value</span>; }
        }
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> GenericList()  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//constructor</span>
    {
        head = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>;
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> AddHead(T t)  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//T as method parameter type</span>
    {
        Node n = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Node(t);
        n.Next = head;
        head = n;
    }

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Implementation of the iterator</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator()
    {
        Node current = head;
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (current != <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>)
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">yield</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> current.Data;
            current = current.Next;
        }
    }

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// IEnumerable&lt;T&gt; inherits from IEnumerable, therefore this class </span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// must implement both the generic and non-generic versions of </span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// GetEnumerator. In most cases, the non-generic method can </span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// simply call the generic method.</span>
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> GetEnumerator();
    }
}

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> SortedList&lt;T&gt; : GenericList&lt;T&gt; <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> T : System.IComparable&lt;T&gt;
{
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// A simple, unoptimized sort algorithm that </span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// orders list elements from lowest to highest:</span>

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> BubbleSort()
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">if</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span> == head || <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span> == head.Next)
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span>;
        }
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">bool</span> swapped;

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">do</span>
        {
            Node previous = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>;
            Node current = head;
            swapped = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">false</span>;

            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (current.next != <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>)
            {
                <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//  Because we need to call this method, the SortedList</span>
                <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//  class is constrained on IEnumerable&lt;T&gt;</span>
                <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">if</span> (current.Data.CompareTo(current.next.Data) &gt; 0)
                {
                    Node tmp = current.next;
                    current.next = current.next.next;
                    tmp.next = current;

                    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">if</span> (previous == <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">null</span>)
                    {
                        head = tmp;
                    }
                    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">else</span>
                    {
                        previous.next = tmp;
                    }
                    previous = tmp;
                    swapped = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">true</span>;
                }
                <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">else</span>
                {
                    previous = current;
                    current = current.next;
                }
            }
        } <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (swapped);
    }
}

<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// A simple class that implements IComparable&lt;T&gt; using itself as the </span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// type argument. This is a common design pattern in objects that </span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// are stored in generic lists.</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Person : System.IComparable&lt;Person&gt;
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> name;
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> age;

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> Person(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> i)
    {
        name = s;
        age = i;
    }

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// This will cause list elements to be sorted on age values.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> CompareTo(Person p)
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> age - p.age;
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">override</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> ToString()
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> name + <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">":"</span> + age;
    }

    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Must implement Equals.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">bool</span> Equals(Person p)
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">this</span>.age == p.age);
    }
}

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Program
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main()
    {
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Declare and instantiate a new generic SortedList class.</span>
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Person is the type argument.</span>
        SortedList&lt;Person&gt; list = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> SortedList&lt;Person&gt;();

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Create name and age values to initialize Person objects.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] names = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] 
        { 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Franscoise"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Bill"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Li"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Sandra"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Gunnar"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Alok"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Hiroyuki"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Maria"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Alessandro"</span>, 
            <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Raul"</span> 
        };

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] ages = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] { 45, 19, 28, 23, 18, 9, 108, 72, 30, 35 };

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Populate the list.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">for</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> x = 0; x &lt; 10; x++)
        {
            list.AddHead(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Person(names[x], ages[x]));
        }

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Print out unsorted list.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (Person p <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> list)
        {
            System.Console.WriteLine(p.ToString());
        }
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Done with unsorted list"</span>);

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Sort the list.</span>
        list.BubbleSort();

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Print out sorted list.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (Person p <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> list)
        {
            System.Console.WriteLine(p.ToString());
        }
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Done with sorted list"</span>);
    }
}

</pre></td></tr></table></span></div></div><p>可将多重接口指定为单个类型上的约束，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Stack&lt;T&gt; <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">where</span> T : System.IComparable&lt;T&gt;, IEnumerable&lt;T&gt;
{
}

</pre></td></tr></table></span></div></div><p>一个接口可定义多个类型参数，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IDictionary&lt;K, V&gt;
{
}

</pre></td></tr></table></span></div></div><p>适用于类的继承规则同样适用于接口：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IMonth&lt;T&gt; { }

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IJanuary     : IMonth&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; { }  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//No error</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IFebruary&lt;T&gt; : IMonth&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>&gt; { }  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//No error</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IMarch&lt;T&gt;    : IMonth&lt;T&gt; { }    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//No error</span>
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//interface IApril&lt;T&gt;  : IMonth&lt;T, U&gt; {}  //Error</span>

</pre></td></tr></table></span></div></div><p>如果泛型接口为逆变的，即仅使用其类型参数作为返回值，则此泛型接口可以从非泛型接口继承。在 .NET Framework 类库中，<span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 从 <span sdata="cer" target="T:System.Collections.IEnumerable"><mshelp:link keywords="T:System.Collections.IEnumerable" tabindex="0">IEnumerable</mshelp:link></span> 继承，因为 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 只在 <span sdata="cer" target="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"><mshelp:link keywords="Overload:System.Collections.Generic.IEnumerable`1.GetEnumerator" tabindex="0">GetEnumerator</mshelp:link></span> 的返回值和 <span sdata="cer" target="P:System.Collections.Generic.IEnumerator`1.Current"><mshelp:link keywords="Overload:System.Collections.Generic.IEnumerator`1.Current" tabindex="0">Current</mshelp:link></span> 属性 getter 中使用 <span class="code">T</span>。</p><p>具体类可以实现已关闭的构造接口，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IBaseInterface&lt;T&gt; { }

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> SampleClass : IBaseInterface&lt;<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>&gt; { }

</pre></td></tr></table></span></div></div><p>只要类参数列表提供了接口必需的所有参数，泛型类便可以实现泛型接口或已关闭的构造接口，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IBaseInterface1&lt;T&gt; { }
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IBaseInterface2&lt;T, U&gt; { }

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> SampleClass1&lt;T&gt; : IBaseInterface1&lt;T&gt; { }          <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//No error</span>
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> SampleClass2&lt;T&gt; : IBaseInterface2&lt;T, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>&gt; { }  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//No error</span>

</pre></td></tr></table></span></div></div><p>对于泛型类、泛型结构或泛型接口中的方法，控制方法重载的规则相同。有关更多信息，请参见<span sdata="link"><a href="673eeea2-4b48-4faa-9c4e-2e89449221b9.htm">泛型方法（C# 编程指南）</a></span>。</p></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><a href="a1ad761e-42f7-41dd-a62f-452a2de26b9d.htm">泛型介绍（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="7da38e81-4f99-4bc5-b07d-c986b687eeba.htm">接口（C# 参考）</a></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="2994d786-c5c7-4666-ab23-4c83129fe39c" tabindex="0">.NET Framework 中的泛型</mshelp:link></span></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>