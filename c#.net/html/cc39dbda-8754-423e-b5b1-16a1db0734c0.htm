<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>类和结构（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="类和结构" />
      <MSHelp:Keyword Index="A" Term="cc39dbda-8754-423e-b5b1-16a1db0734c0" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 类" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 对象" />
      <MSHelp:Keyword Index="K" Term="C# 语言, 结构" />
      <MSHelp:Keyword Index="K" Term="类 [C#], 概述" />
      <MSHelp:Keyword Index="K" Term="对象 [C#]" />
      <MSHelp:Keyword Index="K" Term="结构 [C#], 关于结构" />
      <MSHelp:Attr Name="RevisionNumber" Value="40" />
      <MSHelp:Attr Name="AssetID" Value="cc39dbda-8754-423e-b5b1-16a1db0734c0" />
      <MSHelp:Attr Name="Abstract" Value="&#xD;&#xA;                    类和结构是 .NET Framework 中的通用类型系统的两种基本构造。两者在本质上都属于数据结构，封装着一组整体作为一个逻辑单位的数据和行为。数据和行为是该类或结构的“成员”，它们包含各自的方法、属性和事件等（本主题后面列出了这些内容）。&#xD;&#xA;                " />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">类和结构（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="cc39dbda-8754-423e-b5b1-16a1db0734c0.htm#exampleToggle" onclick="OpenSection(exampleToggle)">示例</a>  <a href="cc39dbda-8754-423e-b5b1-16a1db0734c0.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：
                    
    2008 年 7 月
  
                </font></p><div class="introduction"><p>
                    类和结构是 .NET Framework 中的通用类型系统的两种基本构造。两者在本质上都属于数据结构，封装着一组整体作为一个逻辑单位的数据和行为。数据和行为是该类或结构的“成员”，它们包含各自的方法、属性和事件等（本主题后面列出了这些内容）。
                </p><p>
                    类或结构的声明类似于蓝图，用于在运行时创建实例或对象。如果定义一个名为 <span class="code">Person</span> 的类或结构，则 <span class="code">Person</span> 为类型名称。如果声明并初始化 <span class="code">Person</span> 类型的变量 <span class="code">p</span>，则 <span class="code">p</span> 称为 <span class="code">Person</span> 的对象或实例。可以创建同一 <span class="code">Person</span> 类型的多个实例，每个实例在其属性和字段中具有不同的值。
                </p><p>
                    类是一种引用类型。创建类的对象时，对象赋值到的变量只保存对该内存的引用。将对象引用赋给新变量时，新变量引用的是原始对象。通过一个变量做出的更改将反映在另一个变量中，因为两者引用同一数据。
                </p><p>
                    结构是一种值类型。创建结构时，结构赋值到的变量保存该结构的实际数据。将结构赋给新变量时，将复制该结构。因此，新变量和原始变量包含同一数据的两个不同的副本。对一个副本的更改不影响另一个副本。
                </p><p>
                    类通常用于对较为复杂的行为建模，或对要在创建类对象后进行修改的数据建模。结构最适合一些小型数据结构，这些数据结构包含的数据以创建结构后不修改的数据为主。
                </p><p>
                    有关更多信息，请参见<span sdata="link"><a href="e8848524-7273-429f-8aba-c658d5eff5ad.htm">类（C# 编程指南）</a></span>、<span sdata="link"><a href="af4a5230-fbf3-4eea-95e1-8b883c2f845c.htm">对象（C# 编程指南）</a></span>和<span sdata="link"><a href="b7cf4ff2-0eb7-4e5c-93d5-b2196b4f5d89.htm">结构（C# 编程指南）</a></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />示例</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>
                    下面的示例在 <span class="code">ProgrammingGuide</span> 命名空间的顶级使用三个成员定义了 <span class="code">MyCustomClass</span>。在 <span class="code">Program</span> 类的 <span class="code">Main</span> 方法中创建了 <span class="code">MyCustomClass</span> 的一个实例（对象），并使用点表示法访问该对象的方法和属性。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">namespace</span> ProgrammingGuide
{
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Class definition.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> MyCustomClass
    {
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Class members:</span>
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Property.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> Number { <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">get</span>; <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">set</span>; }

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Method.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> Multiply(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> num)
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> num * Number;
        }

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Instance Constructor.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> MyCustomClass()
        {
            Number = 0;
        }
    }
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Another class definition. This one contains</span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// the Main method, the entry point for the program.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Program
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] args)
        {
            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Create an object of type MyCustomClass.</span>
            MyCustomClass myClass = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> MyCustomClass();

            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Set the value of a public property.</span>
            myClass.Number = 27;

            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Call a public method.</span>
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> result = myClass.Multiply(4);
        }
    }
}


</pre></td></tr></table></span></div></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0, event)" tabindex="0"><img id="sectionToggle0" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />封装</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>
                    “封装”有时被称为面向对象的编程的第一个支柱或原则。根据封装的原则，类或结构可以指定其每个成员对于该类或结构外部的代码的可访问性。可将无意在类或程序集外部使用的方法和变量隐藏起来，以减小编码错误或遭恶意利用的可能性。
                </p><p>
                    有关类的更多信息，请参见<span sdata="link"><a href="e8848524-7273-429f-8aba-c658d5eff5ad.htm">类（C# 编程指南）</a></span>和<span sdata="link"><a href="af4a5230-fbf3-4eea-95e1-8b883c2f845c.htm">对象（C# 编程指南）</a></span>。有关如何设计类的更多信息，请参见<span sdata="link"><mshelp:link keywords="6b49314e-8bba-43ea-97ca-4e0255812f95" tabindex="0">类型设计准则</mshelp:link></span>。
                </p><h3 class="subHeading">成员</h3><div class="subsection"><p>
                    所有方法、字段、常量、属性和事件都必须在类型内部进行声明；这些称为类或结构的“成员”。与其他一些语言不同的是，C# 中没有全局变量或方法。即使是作为程序入口点的 <span class="code">Main</span> 方法也必须在类或结构内部进行声明。下表列出了可在类或结构中声明的所有不同种类的成员。
                </p><ul><li><p>
                    <mshelp:link keywords="3cbb2f61-75f8-4cce-b4ef-f5d1b3de0db7" tabindex="0">字段</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="1fb39621-1738-49b1-a1b3-8587f109123f" tabindex="0">常量</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="e295a8a2-b357-4ee7-a12e-385a44146fa8" tabindex="0">属性</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="cc738f07-e8cd-4683-9585-9f40c0667c37" tabindex="0">方法</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="df2e2e9d-7998-418b-8e7d-890c17ff6c95" tabindex="0">构造函数</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="1ae6e46d-a4b1-4a49-abe5-b97f53d9e049" tabindex="0">析构函数</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="a8e51b22-d294-44fb-9539-0072f06c4cb3" tabindex="0">事件</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="022cd27d-d5e0-4cfe-8b97-dc018cc3355d" tabindex="0">索引器</mshelp:link>
                </p></li><li><p>
                    <mshelp:link keywords="214e7b83-1a41-4f7c-9867-64e9c0bab39f" tabindex="0">运算符</mshelp:link>
                </p></li><li><p>
<mshelp:link keywords="f2e1b315-e3d1-48ce-977f-7bae0960ba99" tabindex="0">嵌套类型</mshelp:link>
                </p></li></ul></div><h3 class="subHeading">可访问性</h3><div class="subsection"><p>
                    有些方法和属性要供类或结构外部的代码（称为“客户端代码”）调用或访问。另有一些方法和属性可能仅供类或结构在自身内部使用。应限制您的代码的可访问性，只允许应当访问它们的客户端代码进行访问，这一点十分重要。使用访问修饰符 <mshelp:link keywords="0ae45d16-a551-4b74-9845-57208de1328e" tabindex="0">public</mshelp:link>、<mshelp:link keywords="05ce3794-6675-4025-bddb-eaaa0ec22892" tabindex="0">protected</mshelp:link>、<mshelp:link keywords="6ee0785c-d7c8-49b8-bb72-0a4dfbcb6461" tabindex="0">internal</mshelp:link>、<span sdata="langKeyword" value="protected internal"><span class="keyword">protected internal</span></span> 和 <mshelp:link keywords="654c0bb8-e6ac-4086-bf96-7474fa6aa1c8" tabindex="0">private</mshelp:link> 可以指定类型及其成员对于客户端代码的可访问性。默认可访问性为 <span sdata="langKeyword" value="private"><span class="keyword">private</span></span>。有关更多信息，请参见<span sdata="link"><a href="6e81ee82-224f-4a12-9baf-a0dca2656c5b.htm">访问修饰符（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">继承</h3><div class="subsection"><p>
                    类（而非结构）支持继承的概念。派生自另一个类（“基类”）的类将自动包含基类除构造函数和析构函数之外的所有公共、受保护和内部成员。有关更多信息，请参见<span sdata="link"><a href="81d64ee4-50f9-4d6c-a8dc-257c348d2eea.htm">继承（C# 编程指南）</a></span>和<span sdata="link"><a href="086af969-29a5-4ce8-a993-0b7d53839dab.htm">多态性（C# 编程指南）</a></span>。
                </p><p>
                    可以将类声明为<mshelp:link keywords="b0797770-c1f3-4b4d-9441-b9122602a6bb" tabindex="0">抽象</mshelp:link>类，表示该类的一个或多个方法不具有实现。抽象类虽然无法直接实例化，但可以用作其他类的基类，由其他类提供缺少的实现。还可以将类声明为<mshelp:link keywords="8e4ed5d3-10be-47db-9488-0da2008e6f3f" tabindex="0">密封</mshelp:link>类，以禁止其他类从该类继承。有关更多信息，请参见<span sdata="link"><a href="99aa52f7-b435-43f9-936e-2470af734c4e.htm">抽象类、密封类及类成员（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">接口</h3><div class="subsection"><p>
                    类和结构可以继承多个接口。从接口继承意味着该类型要实现该接口中定义的所有方法。有关更多信息，请参见<span sdata="link"><a href="2feda177-ce11-432d-81b4-d50f5f35fd37.htm">接口（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">泛型类型</h3><div class="subsection"><p>
                    可以使用一个或多个类型参数来定义类和结构。客户端代码在创建类型的实例时提供类型。例如，<span sdata="cer" target="N:System.Collections.Generic"><mshelp:link keywords="N:System.Collections.Generic" tabindex="0">System.Collections.Generic</mshelp:link></span> 命名空间中的 <span sdata="cer" target="T:System.Collections.Generic.List`1"><mshelp:link keywords="T:System.Collections.Generic.List`1" tabindex="0">List<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 类使用一个类型参数进行定义。客户端代码创建 <span class="code">List&lt;string&gt;</span> 或 <span class="code">List&lt;int&gt;</span> 的实例来指定列表中将包含的类型。有关更多信息，请参见<span sdata="link"><a href="75ea8509-a4ea-4e7a-a2b3-cf72482e9282.htm">泛型（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">静态类型</h3><div class="subsection"><p>
                    可以将类（不是结构）声明为<mshelp:link keywords="5509e215-2183-4da3-bab4-6b7e607a4fdf" tabindex="0">静态</mshelp:link>。静态类只能包含静态成员，不能使用 new 关键字进行实例化。在程序加载时，静态类的一个副本将加载到内存中，可通过类名称访问该类的成员。类和结构都可以包含静态成员。有关更多信息，请参见<span sdata="link"><a href="235614b5-1371-4dbd-9abd-b406a8b0298b.htm">静态类和静态类成员（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">嵌套类型</h3><div class="subsection"><p>
                    类或结构可以嵌套在其他类或结构中。有关更多信息，请参见<mshelp:link keywords="f2e1b315-e3d1-48ce-977f-7bae0960ba99" tabindex="0">嵌套类型</mshelp:link>。
                </p></div><h3 class="subHeading">分部类型</h3><div class="subsection"><p>
                    可以在一个代码文件中定义类、结构或方法的一部分，而在另一个代码文件中定义另一部分。有关更多信息，请参见<mshelp:link keywords="804cecb7-62db-4f97-a99f-60975bd59fa1" tabindex="0">分部类和方法</mshelp:link>。
                </p></div><h3 class="subHeading">对象初始值设定项</h3><div class="subsection"><p>
                    可以实例化和初始化类或结构对象以及对象的集合，无需显式调用其构造函数。有关更多信息，请参见<span sdata="link"><a href="c58f3db5-d7d4-4651-bd2d-5a3a97357f61.htm">对象和集合初始值设定项（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">匿名类型</h3><div class="subsection"><p>
                    在不方便或没必要创建命名类的情况下，例如当使用无需保留或传递给其他方法的数据结构填充列表时，可以使用匿名类型。有关更多信息，请参见<span sdata="link"><a href="59c9d7a4-3b0e-475e-b620-0ab86c088e9b.htm">匿名类型（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">扩展方法</h3><div class="subsection"><p>
                    通过创建一个单独的类型，然后将该类型的方法当作原始类型的方法来调用，可以在不必创建派生类的情况下对类进行“扩展”。有关更多信息，请参见<span sdata="link"><a href="175ce3ff-9bbf-4e64-8421-faeb81a0bb51.htm">扩展方法（C# 编程指南）</a></span>。
                </p></div><h3 class="subHeading">隐式类型的局部变量</h3><div class="subsection"><p>
                    在类或结构方法中，可以使用隐式类型来指示编译器在编译时确定正确的类型。有关更多信息，请参见<span sdata="link"><a href="b9218fb2-ef5d-4814-8a8e-2bc29b0bbc9b.htm">隐式类型的局部变量（C# 编程指南）</a></span>。
                </p></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1, event)" tabindex="0"><img id="sectionToggle1" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />C# 语言规范</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>
                    有关更多信息，请参见 <span sdata="link"><a href="e5d5a5cc-636b-4bff-b9c8-a8edc6207c22.htm">C# 语言规范</a></span>中的以下各章节：
                </p><ul><li><p>
                    1.6 类和对象
                </p></li><li><p>
                    1.7 结构
                </p></li><li><p>
                    3.4.4 类成员
                </p></li><li><p>
                    4.2.1 类类型
                </p></li><li><p>
                    10 类
                </p></li><li><p>
                    11 结构
                </p></li></ul></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(changeHistoryToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(changeHistoryToggle, event)" tabindex="0"><img id="changeHistoryToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />修订记录</span></h1><div id="changeHistorySection" class="section" name="collapseableSection" style=""><div class="caption"></div><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>
                    日期
                </p></th><th><p>
                    修订记录
                </p></th><th><p>
                    原因
                </p></th></tr><tr><td><p>
                    
    <p>2008 年 7 月</p>
  
                </p></td><td><p>
                    在介绍文字中增加了一些信息和定义。
                </p></td><td><p>
                    
    <p>信息补充。</p>
  
                </p></td></tr><tr><td><p>
                    
    <p>2008 年 7 月</p>
  
                </p></td><td><p>
                    在关于可访问性的段落中增加了一些信息。
                </p></td><td><p>
                    
    <p>信息补充。</p>
  
                </p></td></tr></table></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>