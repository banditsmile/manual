<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>Lambda 表达式（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="Lambda 表达式" />
      <MSHelp:Keyword Index="A" Term="57e3ba27-9a82-4067-aca7-5ca446b7bf93" />
      <MSHelp:Keyword Index="K" Term="表达式 lambda [C#]" />
      <MSHelp:Keyword Index="K" Term="表达式 [C#], lambda" />
      <MSHelp:Keyword Index="K" Term="lambda 表达式 [C#]" />
      <MSHelp:Keyword Index="K" Term="外部变量 [C#]" />
      <MSHelp:Keyword Index="K" Term="语句 lambda [C#]" />
      <MSHelp:Attr Name="RevisionNumber" Value="35" />
      <MSHelp:Attr Name="AssetID" Value="57e3ba27-9a82-4067-aca7-5ca446b7bf93" />
      <MSHelp:Attr Name="Abstract" Value="&#xD;&#xA;                    “Lambda 表达式”是一个匿名函数，它可以包含表达式和语句，并且可用于创建委托或表达式目录树类型。&#xD;&#xA;                " />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Lambda 表达式（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="57e3ba27-9a82-4067-aca7-5ca446b7bf93.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>
                    “Lambda 表达式”是一个匿名函数，它可以包含表达式和语句，并且可用于创建委托或表达式目录树类型。
                </p><p>
                    所有 Lambda 表达式都使用 Lambda 运算符 <mshelp:link keywords="8c899251-dafa-4594-bec7-243b39072880" tabindex="0">=&gt;</mshelp:link>，该运算符读为“goes to”。该 Lambda 运算符的左边是输入参数（如果有），右边包含表达式或语句块。Lambda 表达式 <span class="code">x =&gt; x * x</span> 读作“x goes to x times x”。可以将此表达式分配给委托类型，如下所示：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>delegate int del(int i);
del myDelegate = x =&gt; x * x;
int j = myDelegate(5); //j = 25</pre></td></tr></table></span></div><p>
                    创建表达式目录树类型：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>using System.Linq.Expressions;
// ...
Expression&lt;del&gt; = x =&gt; x * x;</pre></td></tr></table></span></div><p>
<span sdata="langKeyword" value="=&gt;"><span class="keyword">=&gt;</span></span> 运算符具有与赋值运算符 (<span sdata="langKeyword" value="="><span class="keyword">=</span></span>) 相同的优先级，并且是右结合运算符。
                </p><p>
Lambda 用在基于方法的 LINQ 查询中，作为诸如 <span sdata="cer" target="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"><mshelp:link keywords="Overload:System.Linq.Enumerable.Where" tabindex="0">Where</mshelp:link></span> 和 <span sdata="cer" target="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"><mshelp:link keywords="Overload:System.Linq.Queryable.Where" tabindex="0">Where</mshelp:link></span> 等标准查询运算符方法的参数。
                </p><p>
                    使用基于方法的语法在 <span sdata="cer" target="T:System.Linq.Enumerable"><mshelp:link keywords="T:System.Linq.Enumerable" tabindex="0">Enumerable</mshelp:link></span> 类中调用 <span sdata="cer" target="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"><mshelp:link keywords="Overload:System.Linq.Enumerable.Where" tabindex="0">Where</mshelp:link></span> 方法时（像在 LINQ to Objects 和 LINQ to XML 中那样），参数是委托类型 <span sdata="cer" target="T:System.Func`2"><mshelp:link keywords="T:System.Func`2" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Func<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T, TResult<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span>。使用 Lambda 表达式创建委托最为方便。例如，当您在 <span sdata="cer" target="T:System.Linq.Queryable"><mshelp:link keywords="T:System.Linq.Queryable" tabindex="0">System.Linq<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Queryable</mshelp:link></span> 类中调用相同的方法时（像在 LINQ to SQL 中那样），则参数类型是 <span sdata="cer" target="T:System.Linq.Expressions.Expression"><mshelp:link keywords="T:System.Linq.Expressions.Expression" tabindex="0">System.Linq.Expressions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Expression</mshelp:link></span>&lt;Func&gt;，其中 Func 是包含至多五个输入参数的任何 Func 委托。同样，Lambda 表达式只是一种用于构造表达式目录树的非常简练的方式。尽管事实上通过 Lambda 创建的对象的类型是不同的，但 Lambda 使得 <b>Where</b> 调用看起来类似。
                </p><p>
                    在前面的示例中，请注意委托签名具有一个 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 类型的隐式类型输入参数，并返回 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span>。可以将 Lambda 表达式转换为该类型的委托，因为该表达式也具有一个输入参数 (<span class="code">x</span>)，以及一个编译器可隐式转换为 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 类型的返回值。（以下几节中将对类型推理进行详细讨论。）使用输入参数 5 调用委托时，它将返回结果 25。
                </p><p>
                    在 <mshelp:link keywords="bc62316a-d41f-4f90-8300-c6f4f0556e43" tabindex="0">is</mshelp:link> 或 <mshelp:link keywords="a9be126b-cbf4-4990-a70d-d0e1983cad0e" tabindex="0">as</mshelp:link> 运算符的左侧不允许使用 Lambda。
                </p><p>
                    适用于匿名方法的所有限制也适用于 Lambda 表达式。有关更多信息，请参见<span sdata="link"><a href="a62441fa-f0a3-4acb-9aa6-93762a635275.htm">匿名方法（C# 编程指南）</a></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0, event)" tabindex="0"><img id="sectionToggle0" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Lambda 表达式</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>
                    表达式在右边的 Lambda 表达式称为“Lambda 表达式”。Lambda 表达式在构造<span sdata="link"><mshelp:link keywords="fb1d3ed8-d5b0-4211-a71f-dd271529294b" tabindex="0">表达式目录树</mshelp:link></span>时广泛使用。Lambda 表达式返回表达式的结果，并采用以下基本形式：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>(input parameters) =&gt; expression</pre></td></tr></table></span></div><p>
                    只有在 Lambda 有一个输入参数时，括号才是可选的；否则括号是必需的。两个或更多输入参数由括在括号中的逗号分隔：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>(x, y) =&gt; x == y</pre></td></tr></table></span></div><p>
                    有时，编译器难于或无法推断输入类型。如果出现这种情况，您可以按以下示例中所示方式显式指定类型：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>(int x, string s) =&gt; s.Length &gt; x</pre></td></tr></table></span></div><p>
                    使用空括号指定零个输入参数：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>() =&gt; SomeMethod()</pre></td></tr></table></span></div><p>
                    在上一个示例中，请注意 Lambda 表达式的主体可以包含方法调用。但是，如果要创建将在另一个域（比如 SQL Server）中使用的表达式目录树，则不应在 Lambda 表达式中使用方法调用。方法在 .NET 公共语言运行时上下文的外部将没有意义。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1, event)" tabindex="0"><img id="sectionToggle1" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Lambda 语句</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>
                    Lambda 语句与 Lambda 表达式类似，只是语句括在大括号中：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>(input parameters) =&gt; {statement;}</pre></td></tr></table></span></div><p>
                    Lambda 语句的主体可以包含任意数量的语句；但是，实际上通常不会多于两个或三个语句。
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>delegate void TestDelegate(string s);
…
TestDelegate myDel = n =&gt; { string s = n + " " + "World"; Console.WriteLine(s); };
myDel("Hello");</pre></td></tr></table></span></div><p>
                    像匿名方法一样，Lambda 语句无法用于创建表达式目录树。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle2)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle2, event)" tabindex="0"><img id="sectionToggle2" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />带有标准查询运算符的 Lambda</span></h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>
                    许多标准查询运算符都具有输入参数，其类型是泛型委托的 <span sdata="cer" target="T:System.Func`2"><mshelp:link keywords="T:System.Func`2" tabindex="0">Func<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T, TResult<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 系列的其中之一。<span sdata="cer" target="T:System.Func`2"><mshelp:link keywords="T:System.Func`2" tabindex="0">Func<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T, TResult<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 委托使用类型参数来定义输入参数的数量和类型，以及委托的返回类型。<b>Func</b> 委托对于封装应用于一组源数据中每个元素的用户定义表达式非常有用。例如，假设有以下委托类型：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>public delegate TResult Func&lt;TArg0, TResult&gt;(TArg0 arg0)</pre></td></tr></table></span></div><p>
可以将委托实例化为 <span class="code">Func&lt;int,bool&gt; myFunc</span>，其中 <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 是输入参数，<span sdata="langKeyword" value="bool"><span class="keyword">bool</span></span> 是返回值。返回值始终在最后一个类型参数中指定。<b>Func&lt;int, string, bool&gt;</b> 定义包含两个输入参数（<span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 和 <span sdata="langKeyword" value="string"><span class="keyword">string</span></span>）且返回类型为 <span sdata="langKeyword" value="bool"><span class="keyword">bool</span></span> 的委托。在调用下面的 <b>Func</b> 委托时，该委托将返回 true 或 false 以指示输入参数是否等于 5：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>    Func&lt;int, bool&gt; myFunc = x =&gt; x == 5;
    bool result = myFunc(4); // returns false of course</pre></td></tr></table></span></div><p>
                    当参数类型为 <b>Expression&lt;Func&gt;</b> 时，您也可以提供 Lambda 表达式，例如在 System.Linq.Queryable 内定义的标准查询运算符中。如果指定 <b>Expression&lt;Func&gt;</b> 参数，Lambda 将编译为表达式目录树。
                </p><p>
                    此处显示了一个标准查询运算符，<span sdata="cer" target="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"><mshelp:link keywords="Overload:System.Linq.Enumerable.Count" tabindex="0">Count</mshelp:link></span> 方法：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>    int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    int oddNumbers = numbers.Count(n =&gt; n % 2 == 1);</pre></td></tr></table></span></div><p>
                    编译器可以推断输入参数的类型，或者您也可以显式指定该类型。这个特别的 Lambda 表达式将计算整数 (<span class="code">n</span>) 的数量，这些整数除以 2 时余数为 1。
                </p><p>
                    以下方法将生成一个序列，其中包含数字数组中出现在“9”之前的所有元素，因为“9”是序列中不满足条件的第一个数字：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>    var firstNumbersLessThan6 = numbers.TakeWhile(n =&gt; n &lt; 6);</pre></td></tr></table></span></div><p>
                    此示例演示如何通过将输入参数括在括号中来指定多个输入参数。该方法将返回数字数组中的所有元素，直至遇到一个值小于其位置的数字为止。不要将 Lambda 运算符 (<span sdata="langKeyword" value="=&gt;"><span class="keyword">=&gt;</span></span>) 与大于等于运算符 (<span sdata="langKeyword" value="=&gt;"><span class="keyword">=&gt;</span></span>) 混淆。
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>    var firstSmallNumbers = numbers.TakeWhile((n, index) =&gt; n &gt;= index);</pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle3)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle3, event)" tabindex="0"><img id="sectionToggle3" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Lambda 中的类型推理</span></h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>
                    在编写 Lambda 时，通常不必为输入参数指定类型，因为编译器可以基于 Lambda 主体、基础委托类型以及 C# 3.0 语言规范中描述的其他因素推断类型。对于大多数标准查询运算符，第一个输入是源序列中的元素的类型。因此，如果要查询 <b>IEnumerable&lt;Customer&gt;</b>，则输入变量将被推断为 <span class="code">Customer</span> 对象，这意味着您可以访问其方法和属性：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>customers.Where(c =&gt; c.City == "London");</pre></td></tr></table></span></div><p>
                    Lambda 的一般规则如下：
                </p><ul><li><p>
                    Lambda 包含的参数数量必须与委托类型包含的参数数量相同。
                </p></li><li><p>
                    Lambda 中的每个输入参数必须都能够隐式转换为其对应的委托参数。
                </p></li><li><p>
                    Lambda 的返回值（如果有）必须能够隐式转换为委托的返回类型。
                </p></li></ul><p>
                    请注意，Lambda 表达式本身没有类型，因为通用类型系统没有“Lambda 表达式”这一内部概念。但是，有时会不正式地论及 Lambda 表达式的“类型”。在这些情况下，类型是指委托类型或 Lambda 表达式所转换为的 <span sdata="cer" target="T:System.Linq.Expressions.Expression"><mshelp:link keywords="T:System.Linq.Expressions.Expression" tabindex="0">Expression</mshelp:link></span> 类型。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle4)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle4, event)" tabindex="0"><img id="sectionToggle4" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Lambda 表达式中的变量范围</span></h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>
                    Lambda 可以引用“外部变量”，这些变量位于在其中定义 Lambda 的封闭方法或类型的范围内。将会存储通过这种方法捕获的变量以供在 Lambda 表达式中使用，即使变量将以其他方式超出范围或被作为垃圾回收。必须明确地分配外部变量，然后才能在 Lambda 表达式中使用该变量。下面的示例演示这些规则：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>delegate bool D();
    delegate bool D2(int i);

    class Test
    {
        D del;
        D2 del2;
        public void TestMethod(int input)
        {
            int j = 0;
            // Initialize the delegates with lambda expressions.
            // Note access to 2 outer variables.
            // del will be invoked within this method.
            del = () =&gt; { j = 10;  return j &gt; input; };

            // del2 will be invoked after TestMethod goes out of scope.
            del2 = (x) =&gt; {return x == j; };
            
            // Demonstrate value of j:
            // Output: j = 0 
            // The delegate has not been invoked yet.
            Console.WriteLine("j = {0}", j);

            // Invoke the delegate.
            bool boolResult = del();

            // Output: j = 10 b = True
            Console.WriteLine("j = {0}. b = {1}", j, boolResult);
        }

        static void Main()
        {
            Test test = new Test();
            test.TestMethod(5);

            // Prove that del2 still has a copy of
            // local variable j from TestMethod.
            bool result = test.del2(10);

            // Output: True
            Console.WriteLine(result);
            
            Console.ReadKey();
        }
    }
</pre></td></tr></table></span></div><p>
                    下列规则适用于 Lambda 表达式中的变量范围：
                </p><ul><li><p>
                    捕获的变量将不会被作为垃圾回收，直至引用变量的委托超出范围为止。
                </p></li><li><p>
                    在外部方法中看不到 Lambda 表达式内引入的变量。
                </p></li><li><p>
                    Lambda 表达式无法从封闭方法中直接捕获 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> 或 <span sdata="langKeyword" value="out"><span class="keyword">out</span></span> 参数。
                </p></li><li><p>
                    Lambda 表达式中的返回语句不会导致封闭方法返回。
                </p></li><li><p>
                    Lambda 表达式不能包含其目标位于所包含匿名函数主体外部或内部的 <span sdata="langKeyword" value="goto"><span class="keyword">goto</span></span> 语句、<span sdata="langKeyword" value="break"><span class="keyword">break</span></span> 语句或 <span sdata="langKeyword" value="continue"><span class="keyword">continue</span></span> 语句。
                </p></li></ul></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle5)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle5, event)" tabindex="0"><img id="sectionToggle5" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />C# 语言规范</span></h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>
                    有关更多信息，请参见 <span sdata="link"><a href="e5d5a5cc-636b-4bff-b9c8-a8edc6207c22.htm">C# 语言规范</a></span>中的以下各章节：
                </p><ul><li><p>
                    5.3.3.29 匿名函数
                </p></li></ul></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="fb1d3ed8-d5b0-4211-a71f-dd271529294b" tabindex="0">表达式目录树</mshelp:link></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><a href="a62441fa-f0a3-4acb-9aa6-93762a635275.htm">匿名方法（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="bc62316a-d41f-4f90-8300-c6f4f0556e43.htm">is（C# 参考）</a></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="a73c4aec-5d15-4e98-b962-1274021ea93d" tabindex="0">语言集成查询 (LINQ)</mshelp:link></span></div><div class="seeAlsoStyle"><a href="http://go.microsoft.com/fwlink/?LinkId=112395">Recursive lambda expressions（递归 lambda 表达式）</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>