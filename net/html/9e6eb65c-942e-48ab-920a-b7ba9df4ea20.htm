<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>传递引用类型参数（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="传递引用类型参数" />
      <MSHelp:Keyword Index="A" Term="9e6eb65c-942e-48ab-920a-b7ba9df4ea20" />
      <MSHelp:Keyword Index="K" Term="方法参数 [C#], 引用类型" />
      <MSHelp:Attr Name="RevisionNumber" Value="11" />
      <MSHelp:Attr Name="AssetID" Value="9e6eb65c-942e-48ab-920a-b7ba9df4ea20" />
      <MSHelp:Attr Name="Abstract" Value="&#xD;&#xA;                    引用类型的变量不直接包含其数据；它包含的是对其数据的引用。当通过值传递引用类型的参数时，有可能更改引用所指向的数据，如某类成员的值。但是无法更改引用本身的值；也就是说，不能使用相同的引用为新类分配内存并使之在块外保持。若要这样做，应使用 ref 或 out 关键字传递参数。为了简单起见，下面的示例使用 ref。&#xD;&#xA;                " />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="CurrentDebugFrameLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">传递引用类型参数（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="9e6eb65c-942e-48ab-920a-b7ba9df4ea20.htm#exampleToggle" onclick="OpenSection(exampleToggle)">示例</a>  <a href="9e6eb65c-942e-48ab-920a-b7ba9df4ea20.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>
                    <mshelp:link keywords="801cf030-6e2d-4a0d-9daf-1431b0c31f47" tabindex="0">引用类型</mshelp:link>的变量不直接包含其数据；它包含的是对其数据的引用。当通过值传递引用类型的参数时，有可能更改引用所指向的数据，如某类成员的值。但是无法更改引用本身的值；也就是说，不能使用相同的引用为新类分配内存并使之在块外保持。若要这样做，应使用 <mshelp:link keywords="b8a5e59c-907d-4065-b41d-95bf4273c0bd" tabindex="0">ref</mshelp:link> 或 <mshelp:link keywords="7e911a0c-3f98-4536-87be-d539b7536ca8" tabindex="0">out</mshelp:link> 关键字传递参数。为了简单起见，下面的示例使用 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />示例</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>
                    下面的示例演示通过值向 <span class="code">Change</span> 方法传递引用类型的参数 <span class="code">arr</span>。由于该参数是对 <span class="code">arr</span> 的引用，所以有可能更改数组元素的值。但是，试图将参数重新分配到不同的内存位置时，该操作仅在方法内有效，并不影响原始变量 <span class="code">arr</span>。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> PassingRefByVal 
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Change(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] pArray)
    {
        pArray[0] = 888;  <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// This change affects the original element.</span>
        pArray = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[5] {-3, -1, -2, -3, -4};   <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// This change is local.</span>
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside the method, the first element is: {0}"</span>, pArray[0]);
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main() 
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] arr = {1, 4, 5};
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, before calling the method, the first element is: {0}"</span>, arr [0]);

        Change(arr);
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, after calling the method, the first element is: {0}"</span>, arr [0]);
    }
}
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">/* Output:
    Inside Main, before calling the method, the first element is: 1
    Inside the method, the first element is: -3
    Inside Main, after calling the method, the first element is: 888
*/</span>

</pre></td></tr></table></span></div></div><p>
                    在上个示例中，数组 <span class="code">arr</span> 为引用类型，在未使用 <span class="parameter" sdata="paramReference">ref</span> 参数的情况下传递给方法。在此情况下，将向方法传递指向 <span class="code">arr</span> 的引用的一个副本。输出显示方法有可能更改数组元素的内容，在这种情况下，从 <span class="code">1</span> 改为 <span class="code">888</span>。但是，在 <span class="code">Change</span> 方法内使用 <mshelp:link keywords="e4136516-f058-45a8-84e5-da00a5cf9b6a" tabindex="0">new</mshelp:link> 运算符来分配新的内存部分，将使变量 <span class="code">pArray</span> 引用新的数组。因此，这之后的任何更改都不会影响原始数组 <span class="code">arr</span>（它是在 <span class="code">Main</span> 内创建的）。实际上，本示例中创建了两个数组，一个在 <span class="code">Main</span> 内，一个在 <span class="code">Change</span> 方法内。
                </p><p>
                    本示例除在方法头和调用中使用 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> 关键字以外，其余与上个示例相同。方法内发生的任何更改都会影响调用程序中的原始变量。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> PassingRefByRef 
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Change(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] pArray)
    {
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Both of the following changes will affect the original variables:</span>
        pArray[0] = 888;
        pArray = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[5] {-3, -1, -2, -3, -4};
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside the method, the first element is: {0}"</span>, pArray[0]);
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main() 
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] arr = {1, 4, 5};
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, before calling the method, the first element is: {0}"</span>, arr[0]);

        Change(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> arr);
        System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, after calling the method, the first element is: {0}"</span>, arr[0]);
    }
}
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">/* Output:
    Inside Main, before calling the method, the first element is: 1
    Inside the method, the first element is: -3
    Inside Main, after calling the method, the first element is: -3
*/</span>

</pre></td></tr></table></span></div></div><p>
                    方法内发生的所有更改都影响 <span class="code">Main</span> 中的原始数组。实际上，使用 <span sdata="langKeyword" value="new"><span class="keyword">new</span></span> 运算符对原始数组进行了重新分配。因此，调用 <span class="code">Change</span> 方法后，对 <span class="code">arr</span> 的任何引用都将指向 <span class="code">Change</span> 方法中创建的五个元素的数组。
                </p><p>
                    交换字符串是通过引用传递引用类型参数的很好的示例。本示例中，<span class="code">str1</span> 和 <span class="code">str2</span> 两个字符串在 <span class="code">Main</span> 中初始化，并作为由 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> 关键字修改的参数传递给 <span class="code">SwapStrings</span> 方法。这两个字符串在该方法内以及 <span class="code">Main</span> 内均进行交换。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> SwappingStrings
 {
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> SwapStrings(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s1, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s2)
     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// The string parameter is passed by reference.</span>
     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Any changes on parameters will affect the original variables.</span>
     {
         <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> temp = s1;
         s1 = s2;
         s2 = temp;
         System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside the method: {0} {1}"</span>, s1, s2);
     }

     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main()
     {
         <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> str1 = <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"John"</span>;
         <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> str2 = <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Smith"</span>;
         System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, before swapping: {0} {1}"</span>, str1, str2);

         SwapStrings(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> str1, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">ref</span> str2);   <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Passing strings by reference</span>
         System.Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Inside Main, after swapping: {0} {1}"</span>, str1, str2);
     }
 }
 <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">/* Output:
     Inside Main, before swapping: John Smith
     Inside the method: Smith John
     Inside Main, after swapping: Smith John
*/</span>

</pre></td></tr></table></span></div></div><p>
                    本示例中，需要通过引用传递参数以影响调用程序中的变量。如果同时从方法头和方法调用中移除 <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> 关键字，则调用程序中不会发生任何更改。
                </p><p>
                    有关字符串的更多信息，请参见<mshelp:link keywords="3037e558-fb22-494d-bca1-a15ade11b11a" tabindex="0">字符串</mshelp:link>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><a href="a5c3003f-7441-4710-b8b1-c79de77e0b77.htm">传递参数（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="6a2b261e-a1cc-49a6-b4f0-6cacae385a1e.htm">使用 ref 和 out 传递数组（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="b8a5e59c-907d-4065-b41d-95bf4273c0bd.htm">ref（C# 参考）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="801cf030-6e2d-4a0d-9daf-1431b0c31f47.htm">引用类型（C# 参考）</a></span></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>