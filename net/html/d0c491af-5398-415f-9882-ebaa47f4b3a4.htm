<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>如何：创建和终止线程（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="如何：创建和终止线程" />
      <MSHelp:Keyword Index="A" Term="d0c491af-5398-415f-9882-ebaa47f4b3a4" />
      <MSHelp:Keyword Index="K" Term="线程处理 [C#], 创建线程" />
      <MSHelp:Keyword Index="K" Term="线程处理 [C#], 线程间的交互" />
      <MSHelp:Keyword Index="K" Term="线程处理 [C#], 启动线程" />
      <MSHelp:Attr Name="RevisionNumber" Value="26" />
      <MSHelp:Attr Name="AssetID" Value="d0c491af-5398-415f-9882-ebaa47f4b3a4" />
      <MSHelp:Attr Name="Abstract" Value="此示例演示如何创建辅助线程，并用它与主线程并行执行处理。还将演示如何使一个线程等待另一个线程，并正确地终止线程。有关多线程处理的背景信息，请参见Managed Threading和Using Threading (C# Programmer's Reference)。" />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbHowTo" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">如何：创建和终止线程（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="d0c491af-5398-415f-9882-ebaa47f4b3a4.htm#exampleToggle" onclick="OpenSection(exampleToggle)">示例</a>  <a href="d0c491af-5398-415f-9882-ebaa47f4b3a4.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>此示例演示如何创建辅助线程，并用它与主线程并行执行处理。还将演示如何使一个线程等待另一个线程，并正确地终止线程。有关多线程处理的背景信息，请参见<span sdata="link"><mshelp:link keywords="7b46a7d9-c6f1-46d1-a947-ae97471bba87" tabindex="0">托管线程处理</mshelp:link></span>和<span sdata="link"><a href="8587c5e7-7d6b-4a1c-918c-5b62b16be8a8.htm">使用线程处理（C# 编程指南）</a></span>。</p><p>该示例创建一个名为 <span class="code">Worker</span> 的类，该类包含辅助线程将执行的方法 <span class="code">DoWork</span>。这实际上是辅助线程的 <span class="code">Main</span> 函数。辅助线程将通过调用此方法来开始执行，并在此方法返回时自动终止。<span class="code">DoWork</span> 方法如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> DoWork()
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (!_shouldStop)
    {
        Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"worker thread: working..."</span>);
    }
    Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"worker thread: terminating gracefully."</span>);
}

</pre></td></tr></table></span></div></div><p><span class="code">Worker</span> 类包含另一个方法，该方法用于通知 <span class="code">DoWork</span> 它应当返回。此方法名为 <span class="code">RequestStop</span>，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> RequestStop()
{
    _shouldStop = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">true</span>;
}

</pre></td></tr></table></span></div></div><p><span class="code">RequestStop</span> 方法只是将 <span sdata="langKeyword" value="true"><span class="keyword">true</span></span> 赋给 <span class="code">_shouldStop</span> 数据成员。由于此数据成员由 <span class="code">DoWork</span> 方法来检查，因此这会间接导致 <span class="code">DoWork</span> 返回，从而终止辅助线程。但是，您应当注意：<span class="code">DoWork</span> 和 <span class="code">RequestStop</span> 将由不同线程执行。<span class="code">DoWork</span> 由辅助线程执行，而 <span class="code">RequestStop</span> 由主线程执行，因此 <span class="code">_shouldStop</span> 数据成员声明为 <span sdata="langKeyword" value="volatile"><span class="keyword">volatile</span></span>，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">private</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">volatile</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">bool</span> _shouldStop;

</pre></td></tr></table></span></div></div><p><span sdata="langKeyword" value="volatile"><span class="keyword">volatile</span></span> 关键字用于通知编译器，将有多个线程访问 <span class="code">_shouldStop</span> 数据成员，因此它不应当对此成员的状态做任何优化假设。有关更多信息，请参见<span sdata="link"><a href="78089bc7-7b38-4cfd-9e49-87ac036af009.htm">volatile（C# 参考）</a></span>。</p><p>通过将 <span sdata="langKeyword" value="volatile"><span class="keyword">volatile</span></span> 与 <span class="code">_shouldStop</span> 数据成员一起使用，可以从多个线程安全地访问此成员，而不需要使用正式的线程同步技术，但这仅仅是因为 <span class="code">_shouldStop</span> 是 <span sdata="langKeyword" value="bool"><span class="keyword">bool</span></span>。这意味着只需要执行单个原子操作就能修改 <span class="code">_shouldStop</span>。但是，如果此数据成员是类、结构或数组，那么，从多个线程访问它可能会导致间歇的数据损坏。假设有一个更改数组中的值的线程。Windows 会定期中断线程，以便允许其他线程执行。因此，此线程会在分配某些数组元素之后和分配其他元素之前被停止。由于数组现在有了一个程序员从不想要的状态，因此，读取此数组的另一个线程可能会失败。</p><p>在实际创建辅助线程之前，<span class="code">Main</span> 函数会创建一个 <span class="code">Worker</span> 对象和 <span sdata="cer" target="T:System.Threading.Thread"><mshelp:link keywords="T:System.Threading.Thread" tabindex="0">Thread</mshelp:link></span> 的一个实例。线程对象被配置为：通过将对 <span class="code">Worker.DoWork</span> 方法的引用传递给 <span sdata="cer" target="T:System.Threading.Thread"><mshelp:link keywords="T:System.Threading.Thread" tabindex="0">Thread</mshelp:link></span> 构造函数，来将该方法用作入口点，如下所示：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>Worker workerObject = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Worker();
Thread workerThread = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Thread(workerObject.DoWork);

</pre></td></tr></table></span></div></div><p>此时，尽管辅助线程对象已存在并已配置，但尚未创建实际的辅助线程。只有当 <span class="code">Main</span> 调用 <span sdata="cer" target="M:System.Threading.Thread.Start"><mshelp:link keywords="Overload:System.Threading.Thread.Start" tabindex="0">Start</mshelp:link></span> 方法后，才会创建实际的辅助线程：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>workerThread.Start();

</pre></td></tr></table></span></div></div><p>此时，系统将启动辅助线程的执行，但这是在与主线程异步执行的。这意味着 <span class="code">Main</span> 函数将在辅助线程进行初始化的同时继续执行代码。为了确保 <span class="code">Main</span> 函数不会尝试在辅助线程有机会执行之前将它终止，<span class="code">Main</span> 函数将一直循环，直到辅助线程对象的 <span sdata="cer" target="P:System.Threading.Thread.IsAlive"><mshelp:link keywords="P:System.Threading.Thread.IsAlive" tabindex="0">IsAlive</mshelp:link></span> 属性设置为 <span sdata="langKeyword" value="true"><span class="keyword">true</span></span>：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (!workerThread.IsAlive);

</pre></td></tr></table></span></div></div><p>下一步，通过调用 <span sdata="cer" target="M:System.Threading.Thread.Sleep(System.Int32)"><mshelp:link keywords="Overload:System.Threading.Thread.Sleep" tabindex="0">Sleep</mshelp:link></span> 来将主线程停止片刻。这确保了辅助线程的 <span class="code">DoWork</span> 函数在 <span class="code">Main</span> 函数执行其他任何命令之前，在 <span class="code">DoWork</span> 方法内部执行若干次循环：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>Thread.Sleep(1);

</pre></td></tr></table></span></div></div><p>在 1 毫秒之后，<span class="code">Main</span> 将通知辅助线程对象，它应当使用 <span class="code">Worker.RequestStop</span> 方法（前面已介绍）自行终止：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>workerObject.RequestStop();

</pre></td></tr></table></span></div></div><p>还可以通过调用 <span sdata="cer" target="Overload:System.Threading.Thread.Abort"><mshelp:link keywords="Overload:System.Threading.Thread.Abort" tabindex="0">Abort</mshelp:link></span> 从另一个线程中终止某个线程。这将强行终止受影响的线程，即使该线程尚未完成其任务，并且未提供清理资源的机会。此示例中显示的技术是首选方法。</p><p>最后，<span class="code">Main</span> 函数对辅助线程对象调用 <span sdata="cer" target="M:System.Threading.Thread.Join"><mshelp:link keywords="Overload:System.Threading.Thread.Join" tabindex="0">Join</mshelp:link></span> 方法。此方法导致当前线程阻塞或等待，直到对象所表示的线程终止。因此，直到辅助线程返回后，<span sdata="cer" target="M:System.Threading.Thread.Join"><mshelp:link keywords="Overload:System.Threading.Thread.Join" tabindex="0">Join</mshelp:link></span> 才会返回，然后自行终止：</p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>workerThread.Join();

</pre></td></tr></table></span></div></div><p>此时，只有执行 <span class="code">Main</span> 的主线程还存在。它会显示一条最终消息，然后返回，从而使主线程也终止。</p><p>下面是完整的示例。</p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />示例</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> System;
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> System.Threading;

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Worker
{
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// This method will be called when the thread is started.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> DoWork()
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (!_shouldStop)
        {
            Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"worker thread: working..."</span>);
        }
        Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"worker thread: terminating gracefully."</span>);
    }
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> RequestStop()
    {
        _shouldStop = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">true</span>;
    }
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Volatile is used as hint to the compiler that this data</span>
    <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// member will be accessed by multiple threads.</span>
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">private</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">volatile</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">bool</span> _shouldStop;
}

<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> WorkerThreadExample
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main()
    {
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Create the thread object. This does not start the thread.</span>
        Worker workerObject = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Worker();
        Thread workerThread = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> Thread(workerObject.DoWork);

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Start the worker thread.</span>
        workerThread.Start();
        Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"main thread: Starting worker thread..."</span>);

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Loop until worker thread activates.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">while</span> (!workerThread.IsAlive);

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Put the main thread to sleep for 1 millisecond to</span>
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// allow the worker thread to do some work:</span>
        Thread.Sleep(1);

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Request that the worker thread stop itself:</span>
        workerObject.RequestStop();

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Use the Join method to block the current thread </span>
        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// until the object's thread terminates.</span>
        workerThread.Join();
        Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"main thread: Worker thread has terminated."</span>);
    }
}

</pre></td></tr></table></span></div></div><p>输出如下：</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>main thread: starting worker thread...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: working...
worker thread: terminating gracefully...
main thread: worker thread has terminated</pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">任务</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="3af7e93e-d462-4495-a060-d29aecbb5769" tabindex="0">“线程”示例</mshelp:link></span></div><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><a href="552f6c68-dbdb-4327-ae36-32cf9063d88c.htm">线程处理（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="8587c5e7-7d6b-4a1c-918c-5b62b16be8a8.htm">使用线程处理（C# 编程指南）</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:System.Threading.Thread"><mshelp:link keywords="T:System.Threading.Thread" tabindex="0">Thread</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="link"><a href="78089bc7-7b38-4cfd-9e49-87ac036af009.htm">volatile（C# 参考）</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:System.Threading.Mutex"><mshelp:link keywords="T:System.Threading.Mutex" tabindex="0">Mutex</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:System.Threading.Monitor"><mshelp:link keywords="T:System.Threading.Monitor" tabindex="0">Monitor</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="Overload:System.Threading.Thread.Start"><mshelp:link keywords="Overload:System.Threading.Thread.Start" tabindex="0">Start</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="P:System.Threading.Thread.IsAlive"><mshelp:link keywords="P:System.Threading.Thread.IsAlive" tabindex="0">IsAlive</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="Overload:System.Threading.Thread.Sleep"><mshelp:link keywords="Overload:System.Threading.Thread.Sleep" tabindex="0">Sleep</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="Overload:System.Threading.Thread.Join"><mshelp:link keywords="Overload:System.Threading.Thread.Join" tabindex="0">Join</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="cer" target="Overload:System.Threading.Thread.Abort"><mshelp:link keywords="Overload:System.Threading.Thread.Abort" tabindex="0">Abort</mshelp:link></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="7b46a7d9-c6f1-46d1-a947-ae97471bba87" tabindex="0">托管线程处理</mshelp:link></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="455c352f-a58f-4d92-ad0f-88cfab73a957" tabindex="0">线程示例</mshelp:link></span></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>