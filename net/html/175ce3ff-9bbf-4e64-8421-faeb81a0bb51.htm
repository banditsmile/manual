<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>扩展方法（C# 编程指南）</title>
    <link rel="stylesheet" type="text/css" href="../styles/presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="http://manual.51yip.com/net/scripts/CommonUtilities.js"> </script>
    <xml>
      <MSHelp:TOCTitle Title="扩展方法" />
      <MSHelp:Keyword Index="A" Term="175ce3ff-9bbf-4e64-8421-faeb81a0bb51" />
      <MSHelp:Keyword Index="K" Term="扩展方法 [C#]" />
      <MSHelp:Keyword Index="K" Term="方法 [C#], 添加到现有类型" />
      <MSHelp:Keyword Index="K" Term="方法 [C#], 扩展" />
      <MSHelp:Attr Name="RevisionNumber" Value="20" />
      <MSHelp:Attr Name="AssetID" Value="175ce3ff-9bbf-4e64-8421-faeb81a0bb51" />
      <MSHelp:Attr Name="Abstract" Value="&#xD;&#xA;                    扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。&#xD;&#xA;                " />
      <MSHelp:Attr Name="codelang" Value="CSharp" />
      <MSHelp:Attr Name="CommunityContent" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLangVers" Value="CSharp" />
      <MSHelp:Attr Name="DocSet" Value="C#" />
      <MSHelp:Attr Name="DocSet" Value="C# Lang" />
      <MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
      <MSHelp:Attr Name="ProgModel" Value="managed" />
      <MSHelp:Attr Name="ShippedIn" Value="vs.90" />
      <MSHelp:Attr Name="Technology" Value="ManagedCode" />
      <MSHelp:Attr Name="TopicVersion" Value="09.00.08178.10000" />
      <MSHelp:Attr Name="Catalog Container" Value="System_Default_Catalog" />
      <MSHelp:Attr Name="Content Set Container" Value="System_Default_Content_Set" />
      <MSHelp:Attr Name="TopicType" Value="kbRef" />
      <MSHelp:Attr Name="Locale" Value="zh-chs" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" title="“折叠”图像" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" title="“展开”图像" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" title="“复制”图像" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="http://manual.51yip.com/net/icons/copycodeHighlight.gif" title="“复制悬停”图像" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">全部折叠</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">全部展开</label> </span>
            <span>    </span>
            <span id="devlangsDropdown" class="filter" tabindex="0">
              <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：全部 </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：多个 </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual Basic </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：C# </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：Visual C++ </nobr></label><label id="devlangsMenuJSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：J# </nobr></label><label id="devlangsMenuJScriptLabel" for="devlangsDropdownImage" style="display: none;"><nobr>代码：JScript </nobr></label></span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
        <br />
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
        <input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label>
        <br />
        <input id="JSharpCheckbox" type="checkbox" data="JSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JSharpCheckbox">J#</label>
        <br />
        <input id="JScriptCheckbox" type="checkbox" data="JScript,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="JScriptCheckbox">JScript</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">C# 编程指南</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">扩展方法（C# 编程指南）</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="175ce3ff-9bbf-4e64-8421-faeb81a0bb51.htm#exampleToggle" onclick="OpenSection(exampleToggle)">示例</a>  <a href="175ce3ff-9bbf-4e64-8421-faeb81a0bb51.htm#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">另请参见</a>  
<script type="text/javascript">
var fbBody = '%b8%d0%d0%bb%c4%fa%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%bf%aa%b7%a2%b0%e6%b1%e0%d0%b4%cd%c5%b6%d3%bd%ab%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%d3%c3%d3%da%b8%c4%bd%f8%ce%c4%b5%b5%a1%a3%ce%d2%c3%c7%d4%da%c9%f3%d4%c4%c4%fa%b5%c4%b7%b4%c0%a1%d2%e2%bc%fb%ca%b1%a3%ac%bf%c9%c4%dc%bb%e1%b8%f8%c4%fa%b7%a2%cb%cd%b5%e7%d7%d3%d3%ca%bc%fe%a3%ac%d2%d4%c7%eb%c4%fa%cc%e1%b9%a9%bd%f8%d2%bb%b2%bd%b5%c4%bd%e2%ca%cd%cb%b5%c3%f7%bb%f2%d5%df%be%cd%bd%e2%be%f6%b7%bd%b0%b8%cc%e1%b9%a9%b7%b4%c0%a1%d2%e2%bc%fb%a1%a3%ce%d2%c3%c7%b2%bb%bb%e1%bd%ab%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%d3%c3%d3%da%c8%ce%ba%ce%c6%e4%cb%fb%d3%c3%cd%be%a3%ac%b2%a2%c7%d2%d4%da%c9%f3%d4%c4%cd%ea%d6%ae%ba%f3%a3%ac%ce%d2%c3%c7%b2%bb%bb%e1%d4%d9%b1%a3%c1%f4%c4%fa%b5%c4%b5%e7%d7%d3%d3%ca%bc%fe%b5%d8%d6%b7%a1%a3%0d%0a%d3%d0%b9%d8%20Microsoft%20%d2%fe%cb%bd%d5%fe%b2%df%b5%c4%bd%f8%d2%bb%b2%bd%d0%c5%cf%a2%a3%ac%c7%eb%b2%ce%bc%fb%20http%3a%2f%2fprivacy.microsoft.com%2fzh-cn%2fdefault.aspx%a1%a3';
var fbSubject = 'Customer%20Feedback';
</script>
  <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);"> 发送反馈意见</a></span>
</td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <font color="DarkGray"></font>
        <p /> <p><font color="DarkGray">更新：2007 年 11 月</font></p><div class="introduction"><p>
                    扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。
                </p><p>
                    最常见的扩展方法是 LINQ 标准查询运算符，这些运算符在现有 <span sdata="cer" target="T:System.Collections.IEnumerable"><mshelp:link keywords="T:System.Collections.IEnumerable" tabindex="0">System.Collections<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>IEnumerable</mshelp:link></span> 和 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">System.Collections.Generic<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 类型中添加了查询功能。若要使用这些标准查询运算符，请先使用 <span class="code">using System.Linq</span> 指令将它们纳入范围中。然后，任何实现了 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 的类型看起来都具有 <span sdata="cer" target="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"><mshelp:link keywords="Overload:System.Linq.Enumerable.GroupBy" tabindex="0">GroupBy</mshelp:link></span>、<span sdata="cer" target="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"><mshelp:link keywords="Overload:System.Linq.Enumerable.OrderBy" tabindex="0">OrderBy</mshelp:link></span>、<span sdata="cer" target="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})"><mshelp:link keywords="Overload:System.Linq.Enumerable.Average" tabindex="0">Average</mshelp:link></span> 等实例方法。在 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 类型的实例（如 <span sdata="cer" target="T:System.Collections.Generic.List`1"><mshelp:link keywords="T:System.Collections.Generic.List`1" tabindex="0">List<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 或 <span sdata="cer" target="T:System.Array"><mshelp:link keywords="T:System.Array" tabindex="0">Array</mshelp:link></span>）后键入“点”时，可以在 IntelliSense 语句结束中看到这些附加方法。
                </p><p>
                    下面的示例演示如何对一个整数数组调用标准查询运算符 <b>OrderBy</b> 方法。括号里面的表达式是一个 lambda 表达式。很多标准查询运算符采用 lambda 表达式作为参数，但这不是扩展方法的必要条件。有关更多信息，请参见 <span sdata="link"><a href="57e3ba27-9a82-4067-aca7-5ca446b7bf93.htm">Lambda 表达式（C# 编程指南）</a></span>。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> ExtensionMethods2    
{

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main()
    {            
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span>[] ints = { 10, 45, 15, 39, 21, 26 };
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> result = ints.OrderBy(g =&gt; g);
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">foreach</span> (<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">var</span> i <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">in</span> result)
        {
            System.Console.Write(i + <span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">" "</span>);
        }           
    }        
}
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">//Output: 10 15 21 26 39 45</span>

</pre></td></tr></table></span></div></div><p>
                    扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。它们的第一个参数指定该方法作用于哪个类型，并且该参数以 <mshelp:link keywords="d4f827fe-4710-410b-89b8-867dad44b8a3" tabindex="0">this</mshelp:link> 修饰符为前缀。仅当您使用 <span sdata="langKeyword" value="using"><span class="keyword">using</span></span> 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。
                </p><p>
                    下面的示例演示为 <span sdata="cer" target="T:System.String"><mshelp:link keywords="T:System.String" tabindex="0">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>String</mshelp:link></span> 类定义的一个扩展方法。请注意，它是在非嵌套、非泛型静态类内部定义的：
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">namespace</span> ExtensionMethods
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> MyExtensions
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> WordCount(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">this</span> String str)
        {
            <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">return</span> str.Split(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">char</span>[] { ' ', '.', '?' }, StringSplitOptions.RemoveEmptyEntries).Length;
        }
    }   
}

</pre></td></tr></table></span></div></div><p>
                    可使用以下 <span sdata="langKeyword" value="using"><span class="keyword">using</span></span> 指令将 <span class="code">WordCount</span> 扩展方法放入范围中：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>using ExtensionMethods;</pre></td></tr></table></span></div><p>
                    而且，可以在应用程序中使用以下语法对该扩展方法进行调用：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>string s = "Hello Extension Methods";
int i = s.WordCount();</pre></td></tr></table></span></div><p>
                    在代码中，可以使用实例方法语法调用该扩展方法。但是，编译器生成的中间语言 (IL) 会将代码转换为对静态方法的调用。因此，并未真正违反封装原则。实际上，扩展方法无法访问它们所扩展的类型中的私有变量。
                </p><p>
                    有关更多信息，请参见<span sdata="link"><a href="7dab2a56-cf8e-4a47-a444-fe610a02772a.htm">如何：实现和调用自定义扩展方法（C# 编程指南）</a></span>。
                </p><p>
                    通常，您更多时候是调用扩展方法而不是实现您自己的扩展方法。由于扩展方法是使用实例方法语法调用的，因此不需要任何特殊知识即可从客户端代码中使用它们。若要为特定类型启用扩展方法，只需为在其中定义这些方法的命名空间添加 <span sdata="langKeyword" value="using"><span class="keyword">using</span></span> 指令。例如，若要使用标准查询运算符，请将以下 <span sdata="langKeyword" value="using"><span class="keyword">using</span></span> 指令添加到代码中：
                </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre>using System.Linq;</pre></td></tr></table></span></div><p>
                    （您可能还必须添加对 System.Core.dll 的引用。）您将注意到，标准查询运算符现在作为可供大多数 <span sdata="cer" target="T:System.Collections.Generic.IEnumerable`1"><mshelp:link keywords="T:System.Collections.Generic.IEnumerable`1" tabindex="0">IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span></mshelp:link></span> 类型使用的附加方法显示在 IntelliSense 中。
                </p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" title="说明" src="../icons/alert_note.gif" /><b>说明：</b></th></tr><tr><td><p>尽管标准查询运算符没有显示在 <span sdata="cer" target="T:System.String"><mshelp:link keywords="T:System.String" tabindex="0">String</mshelp:link></span> 的 IntelliSense 中，但它们仍然可用。</p></td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0, event)" tabindex="0"><img id="sectionToggle0" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />在编译时绑定扩展方法</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>
                    可以使用扩展方法来扩展类或接口，但不能重写扩展方法。与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。编译时，扩展方法的优先级总是比类型本身中定义的实例方法低。换句话说，如果某个类型具有一个名为 <span class="code">Process(int i)</span> 的方法，而您有一个具有相同签名的扩展方法，则编译器总是绑定到该实例方法。当编译器遇到方法调用时，它首先在该类型的实例方法中寻找匹配的方法。如果未找到任何匹配方法，编译器将搜索为该类型定义的任何扩展方法，并且绑定到它找到的第一个扩展方法。下面的示例演示编译器如何确定要绑定到哪个扩展方法或实例方法。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />示例</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>
                    下面的示例演示 C# 编译器在确定是将方法调用绑定到类型上的实例方法还是绑定到扩展方法时所遵循的规则。静态类 <span class="code">Extensions</span> 包含为任何实现了 <span class="code">IMyInterface</span> 的类型定义的扩展方法。类 <span class="code">A</span>、<span class="code">B</span> 和 <span class="code">C</span> 都实现了该接口。
                </p><p>
                    <span class="code">MethodB</span> 方法永远不会被调用，因为它的名称和签名与这些类已经实现的方法完全匹配。
                </p><p>
                    如果编译器找不到具有匹配签名的实例方法，它会绑定到匹配的扩展方法（如果存在这样的方法）。
                </p><div name="snippetGroup"><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" title="“复制”图像" src="../icons/copycode.gif" />复制代码</span></th></tr><tr><td colspan="2"><pre><span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">namespace</span> Extensions
{
  <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> System;
  <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> ExtensionMethodsDemo1;

     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Define extension methods for any type that implements IMyInterface.</span>
     <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> Extension
     {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodA(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">this</span> IMyInterface myInterface, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> i)
        {
            Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Extension.MethodA(this IMyInterface myInterface, int i)"</span>);
        }

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodA(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">this</span> IMyInterface myInterface, <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span> s) 
        {
            Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Extension.MethodA(this IMyInterface myInterface, string s)"</span>);
        }

        <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// This method is never called, because the three classes implement MethodB.</span>
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodB(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">this</span> IMyInterface myInterface) 
        {
            Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"Extension.MethodB(this IMyInterface myInterface)"</span>);
        }
    }
}
<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">namespace</span> ExtensionMethodsDemo1
{
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> System;
    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">using</span> Extensions;

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">interface</span> IMyInterface
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodB();
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> A : IMyInterface 
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodB(){Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"A.MethodB()"</span>);}
    } 

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> B : IMyInterface
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodB() { Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"B.MethodB()"</span>); }
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodA(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">int</span> i) { Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"B.MethodA(int i)"</span>); }
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> C : IMyInterface
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodB() { Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"C.MethodB()"</span>); }
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">public</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> MethodA(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">object</span> obj) { Console.WriteLine(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"C.MethodA(object obj)"</span>); }
    }

    <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">class</span> ExtMethodDemo
    {
        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> Main(<span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">string</span>[] args)
        {
            A a = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> A();
            B b = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> B();
            C c = <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">new</span> C();
            TestMethodBinding(a,b,c);
        }

        <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">static</span> <span class="keyword" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">void</span> TestMethodBinding(A a, B b, C c)
        {
            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// A has no methods, so each call resolves to </span>
            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// the extension methods whose signatures match.</span>
            a.MethodA(1);           <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Extension.MethodA(object, int)</span>
            a.MethodA(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"hello"</span>);     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Extension.MethodA(object, string)</span>
            a.MethodB();            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// A.MethodB()</span>

            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// B itself has a method with this signature.</span>
            b.MethodA(1);           <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// B.MethodA(int)</span>
            b.MethodB();            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// B.MethodB()</span>

            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// B has no matching method, but Extension does.</span>
            b.MethodA(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"hello"</span>);     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// Extension.MethodA(object, string)</span>

            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// In each case C has a matching instance method.</span>
            c.MethodA(1);           <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// C.MethodA(object)</span>
            c.MethodA(<span class="literal" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">"hello"</span>);     <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// C.MethodA(object)</span>
            c.MethodB();            <span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">// C.MethodB()</span>
        }
    }
}
<span class="comment" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">/* Output:
    Extension.MethodA(this IMyInterface myInterface, int i)
    Extension.MethodA(this IMyInterface myInterface, string s)
    A.MethodB()
    B.MethodA(int i)
    B.MethodB()
    Extension.MethodA(this IMyInterface myInterface, string s)
    C.MethodA(object obj)
    C.MethodA(object obj)
    C.MethodB()
 */</span>

</pre></td></tr></table></span></div></div></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1, event)" tabindex="0"><img id="sectionToggle1" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />通用准则</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>
                    通常，建议您只在不得已的情况下才实现扩展方法，并谨慎地实现。只要有可能，必须扩展现有类型的客户端代码都应该通过创建从现有类型派生的新类型来达到这一目的。有关更多信息，请参见<span sdata="link"><a href="81d64ee4-50f9-4d6c-a8dc-257c348d2eea.htm">继承（C# 编程指南）</a></span>。
                </p><p>
                    在使用扩展方法来扩展您无法更改其源代码的类型时，您需要承受该类型实现中的更改会导致扩展方法失效的风险。
                </p><p>
                    如果您确实为给定类型实现了扩展方法，请记住以下两点：
                </p><ul><li><p>
                    如果扩展方法与该类型中定义的方法具有相同的签名，则扩展方法永远不会被调用。
                </p></li><li><p>
                    扩展方法被在命名空间级别放入范围中。例如，如果您在同一个名为 <span class="code">Extensions</span> 的命名空间中具有多个包含扩展方法的静态类，则这些扩展方法将全部由 <span class="code">using Extensions;</span> 指令放入范围中。
                </p></li></ul><p>
                    类库的实施者不应使用扩展方法来避免创建程序集的新版本。如果您要向库中添加重要的新功能，并且您拥有源代码，则应该遵循标准 .NET Framework 程序集版本控制准则。有关更多信息，请参见<span sdata="link"><mshelp:link keywords="775ad4fb-914f-453c-98ef-ce1089b6f903" tabindex="0">程序集版本控制</mshelp:link></span>。
                </p></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />请参见</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><h4 class="subHeading">概念</h4><div class="seeAlsoStyle"><span sdata="link"><a href="ac0f23a2-6bf3-4077-be99-538ae5fd3bc5.htm">C# 编程指南</a></span></div><div class="seeAlsoStyle"><span sdata="link"><mshelp:link keywords="24cda21e-8af8-4632-b519-c404a839b9b2" tabindex="0">标准查询运算符概述</mshelp:link></span></div><h4 class="subHeading">参考</h4><div class="seeAlsoStyle"><span sdata="link"><a href="57e3ba27-9a82-4067-aca7-5ca446b7bf93.htm">Lambda 表达式（C# 编程指南）</a></span></div><h4 class="subHeading">其他资源</h4><div class="seeAlsoStyle"><a href="http://go.microsoft.com/fwlink/?LinkId=112385">Conversion rules for Instance parameters and their impact（实例参数的转换规则及其影响）</a></div><div class="seeAlsoStyle"><a href="http://go.microsoft.com/fwlink/?LinkId=112386">Extension methods Interoperability between languages（扩展方法在不同语言之间的互操作性）</a></div><div class="seeAlsoStyle"><a href="http://go.microsoft.com/fwlink/?LinkId=112387">Extension methods and Curried Delegates（扩展方法和扩充委托）</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" title="“页脚”图像" />
        </div>
<span id="feedbackarea">将有关本主题的<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','09.00','09.00.08178.10000',fbBody,fbSubject);">反馈意见</a>发送给 Microsoft。</span>
</div>
    </div>
  </body>
</html>