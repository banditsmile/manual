<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Element.readAttribute - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>readAttribute</h2>
		<div id="excerpt">
			<pre><code class="ebnf">readAttribute(element, attribute) -> String | null</code></pre>
			<p>
				返回 <code>elemnet</code> 由参数 <code>attribute</code> 指定的属性值，若不存在指定的属性值，返回 <code>null</code>。
			</p>
		</div>
		<div id="abody">
			<p>
				提供这个方法主要是基于以下两个目的：首先，它对 <code>getAttribute</code> 做了简单的封装，在 Safari 和 Internet Explorer
				下，<code>getAttribute</code> 并不是一个“真正”的函数对象（它没有 <code>.apply</code> 或 <code>.call</code> 实例方法）。
				其次，它清理了 Internet Explorer 处理属性时造成的可怕的混乱。
			</p>
			<h3>样例</h3>
			<pre><code class="html">&lt;a id="tag" href="/tags/prototype" rel="tag" title="view　related bookmarks." my_widget="some info."&gt;Prototype&lt;/a&gt; </code></pre>
			<pre><code class="javascript">$('tag').readAttribute('href'); 
// -> '/tags/prototype'
$('tag').readAttribute('title'); 
// -> 'view related bookmarks.' 
$('tag').readAttribute('my_widget');
// -> 'some info.' </code></pre>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
