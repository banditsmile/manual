<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Element.extend - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>extend</h2>
		<div id="excerpt">
			<pre><code class="ebnf">extend(element)</code></pre>
			<p>
				扩展 <code>element</code>，使其具有 <a href="methods.htm" >Element.Methods</a> 和
				<a href="simulated.htm" >Element.Methods.Simulated</a> 包含的所有方法。如果 <code>element</code>
				具有 <code>input</code>、<code>textarea</code> 或者 <code>select</code> 标签，扩展后也同时拥有
				<a href="../form/element.htm" >Form.Element.Methods</a> 的方法，如果具有 <code>form</code> 标签，则拥有
				<a href="../form.htm" >Form.Methods</a> 的方法。
			</p>
		</div>
		<div id="abody">
			<p>这是一个充满魔力的方法！</p>
			<p>
				通过 Prototype 定义的方法扩展一个元素，我们能够为语法添加一层糖衣，用我们所期望的方式编写代码。例如，在一个已扩展的元素上可以这么做：
			</p>
			<pre><code class="javascript">element.update('hello world'); </code></pre>
			<p>
				并且，因为大多数 <code>Element</code> 的方法都返回方法本身所应用到的元素，所以可以像链条一样一环扣一环的对方法进行调用：
			</p>
			<pre><code class="javascript">element.update('hello world').addClassName('greeting');</code></pre>
			<p>
				注意，所有 <code>Element</code> 的方法返回的元素都已经被扩展（甚至包括类似 <a href="siblings.htm" >Element.siblings</a>
				这种返回元素数组的方法）。显然，Prototype 的王牌工具函数 <a href="../utility/dollar.htm" >$()</a> 和
				<a href="../utility/dollar-dollar.htm" >$$()</a> 也会对返回元素进行扩展。
			</p>
			<p>如果你想更深入的了解 Prototype 是如何扩展 DOM 的，请参阅 <a href="http://prototypejs.org/learn/extensions" >这篇文章</a>.</p>				
		</div>
	</div>
	<!-- /main -->
</body>
</html>
