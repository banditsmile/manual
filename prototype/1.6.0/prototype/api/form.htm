<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Form - Prototype JavaScript 框架</title>
	<link href="../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>Form</h2>
		<div id="method-list">
			<ul>
				<li><a href="form.htm#method-disable">disable</a></li>
				<li><a href="form.htm#method-enable">enable</a></li>
				<li><a href="form.htm#method-findfirstelement">findFirstElement</a></li>
				<li><a href="form.htm#method-focusfirstelement">focusFirstElement</a></li>
				<li><a href="form.htm#method-getelements">getElements</a></li>
				<li><a href="form.htm#method-getinputs">getInputs</a></li>
				<li><a href="form.htm#method-request">request</a></li>
				<li><a href="form.htm#method-reset">reset</a></li>
				<li><a href="form.htm#method-serialize">serialize</a></li>
				<li><a href="form.htm#method-serializeelements">serializeElements</a></li>
			</ul>
		</div>
		<div id="abody">
			<p>
				Form 是一个命名空间，同时也是一个模块，它汇聚了所有与表单相关的行为，对表单的操作和串行化进行了良好的封装。
				但是它所提供的方法是针对整个表单的，而表单上的控件处理，由子模块 <a href="form/element.htm" >Form.Element</a> 负责。
			</p>
			<p>
				对于已扩展的表单元素（参见 <a href="http://www.prototypejs.org/learn/extensions" >“Prototype 如何扩展 DOM”</a>），
				大部分扩展方法都是直接可以使用的。
			</p>
			<p>
				<strong>译注：</strong>注意本文中表单元素（Form Element 以及参数 formElement）和表单控件（Form Control）的区别：
				表单元素指表单本身，即 &lt;form&gt; 标签所代表的元素。表单控件指表单中用于收集数据的元素，如
				&lt;input&gt;、&lt;select&gt; 等等。
			</p>
		</div>
		<div id="method-excerpts">
			<h3>方法</h3>
			<div id="method-disable" class="mexcerpt">
				<h4><a href="form/disable.htm" >disable</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">disable(formElement) -> HTMLFormElement</code></pre>
					<p>禁用表单中的所有控件。禁用后表单控件仍然可见，但不能再进行编辑。</p>
				</div>
			</div>
			<div id="method-enable" class="mexcerpt">
				<h4><a href="form/enable.htm" >enable</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">enable(formElement) -> HTMLFormElement</code></pre>
					<p>启用一个完全或部分控件被禁用的表单。</p>
				</div>
			</div>
			<div id="method-findfirstelement" class="mexcerpt">
				<h4><a href="form/findFirstElement.htm" >findFirstElement</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">findFirstElement(formElement) -> HTMLElement</code></pre>
					<p>在表单中查找第一个未隐藏、未禁用的控件。</p>
				</div>
			</div>
			<div id="method-focusfirstelement" class="mexcerpt">
				<h4><a href="form/focusFirstElement.htm" >focusFirstElement</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">focusFirstElement(formElement) -> HTMLFormElement</code></pre>
					<p>指定表单第一个未隐藏、未禁用的控件获取键盘焦点。</p>
				</div>
			</div>
			<div id="method-getelements" class="mexcerpt">
				<h4><a href="form/getElements.htm" >getElements</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">getElements(formElement) -> array</code></pre>
					<p>返回指定表单中所有控件的集合。</p>
				</div>
			</div>
			<div id="method-getinputs" class="mexcerpt">
				<h4><a href="form/getInputs.htm" >getInputs</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">getInputs(formElement [, type [, name]]) -> array</code></pre>
					<p>
						返回指定表单中所有 INPUT 元素的集合。若要通过 INPUT 元素的 type 和 name 属性限制返回的结果集，请使用可选的
						<code>type</code> 和 <code>name</code> 参数。
					</p>
				</div>
			</div>
			<div id="method-request" class="mexcerpt">
				<h4><a href="form/request.htm" >request</a><div class="box">1.5.1</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">request([options]) -> new Ajax.Request</code></pre>
					<p>
						这是一个便捷的方法，可将表单串行化并通过 <a href="ajax.htm" >Ajax.Request</a> 提交到表单
						<code>action</code> 属性指定的 URL。参数 <code>options</code> 会被传递到 Ajax.Request
						实例。在 <code>options</code> 参数中，可重定义表单的 HTTP 方式（<strong>译注：</strong>指
						get、post 等等）并指定附加的参数。
					</p>
				</div>
			</div>
			<div id="method-reset" class="mexcerpt">
				<h4><a href="form/reset.htm" >reset</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">reset(formElement) -> HTMLFormElement</code></pre>
					<p>将表单中控件的值重置为默认值。</p>
				</div>
			</div>
			<div id="method-serialize" class="mexcerpt">
				<h4><a href="form/serialize.htm" >serialize</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">serialize(formElement[, getHash = false]) -> String | object</code></pre>
					<p>
						串行化表单数据为字符串，以适用于 Ajax 请求（默认行为）。若指定可选的参数 <code>getHash</code> 值为
						<code>true</code>，则返回一个 Hash 对象，以表单控件的名称（name 属性）为“键”，控件所代表的数据为“值”。
					</p>
				</div>
			</div>
			<div id="method-serializeelements" class="mexcerpt">
				<h4>
					<a href="form/serializeElements.htm" >serializeElements</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">serializeElements(elements[, getHash = false]) -> string | object</code></pre>
					<p>
						串行化表单控件数组为字符串，以适用于 Ajax 请求（默认行为）。若指定可选的参数 <code>getHash</code> 值为
						<code>true</code>，则返回一个 Hash 对象，以控件的名称（name 属性）为“键”，控件所代表的数据为“值”。
					</p>
				</div>
			</div>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
