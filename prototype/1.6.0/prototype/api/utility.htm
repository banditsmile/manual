<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>常用工具函数 - Prototype JavaScript 框架</title>
	<link href="../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>常用工具函数</h2>
		<div id="method-list">
			<ul>
				<li><a href="utility.htm#method-$">$</a></li>
				<li><a href="utility.htm#method-$$">$$</a></li>
				<li><a href="utility.htm#method-$a">$A</a></li>
				<li><a href="utility.htm#method-$f">$F</a></li>
				<li><a href="utility.htm#method-$h">$H</a></li>
				<li><a href="utility.htm#method-$r">$R</a></li>
				<li><a href="utility.htm#method-$w">$w</a></li>
				<li><a href="utility.htm#method-try.these">Try.these</a></li>
				<li><a href="utility.htm#method-document.getelementsbyclassname">document.getElementsByClassName</a></li>
			</ul>
		</div>
		<div id="abody">
			<p>
				Prototype 提供了一系列“便利”的函数，除 <code>$</code> 外，大都是一些 Prototype
				函数的简称。<code>$</code> 使用一些附加的功能封装了 DOM 节点。
			</p>
			<p>
				这些工具函数提供的功能几乎在所有的 Javascript 脚本中都会被用到，所以它们的命名必须简捷，在
				Prototype中，它们遵循 <code>$</code> 的命名约束。
			</p>
			<p>
				毫无疑问，<a href="utility/dollar.htm" >$()</a> 是最常用的工具函数，事实上，在
				Prototype 代码中，<code>$</code> 函数无处不在，它接受一个或多个元素 ID 或实际的 DOM
				元素作为参数。它还提供了许多有用的功能，而不仅只是对 <code>document.getElementById</code>
				进行简单封装。具体的使用方法请参见文档。				
			</p>
			<p>
				这些工具函数是使用 Prototype 进行 Javascript 高效编码的基石之一，值得我们花费一些时间来学习它。
			</p>
		</div>
		<div id="method-excerpts">
			<h3>函数列表</h3>
			<div id="method-$" class="mexcerpt">
				<h4>
					<a href="utility/dollar.htm" >$</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$(id | element) -> HTMLElement Or $((id | element)...) -> [HTMLElement...]</code></pre>
					<p>
						如果提供一个字符串参数，则返回 ID 为指定字符串的元素。如果传入参数为 DOM 元素，则返回该
						DOM 元素。可传入多个参数，参数的数目没有限制。该函数返回的所有元素都已经被 Prototype
						进行了相应的 DOM 方法扩展。
					</p>
				</div>
			</div>
			<div id="method-$$" class="mexcerpt">
				<h4>
					<a href="utility/dollar-dollar.htm" >$$</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$$(cssRule...) -> [HTMLElement...]</code></pre>
					<p>
						接受一个或多个字符串参数，字符串参数必须符合 CSS 选择规则(CSS Selectors)。
						返回匹配这些 CSS 选择规则的 DOM 元素数组。数组元素按照 document 中节点的顺序进行排序，
						并且这些元素都进行了相应的 DOM 方法扩展。
					</p>
				</div>
			</div>
			<div id="method-$a" class="mexcerpt">
				<h4>
					<a href="utility/dollar-a.htm" >$A</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$A(iterable) -> actualArray</code></pre>
					<p>
						接受一个类似于数组的集合（具有数字索引），返回相应的 <code>Array</code>
						对象。该函数是 <a href="array/from.htm" >Array.from</a> 的简称。
						但是在进行 <code>Array</code> 转换时，我们推荐使用 <code>$A</code>。
					</p>
				</div>
			</div>
			<div id="method-$f" class="mexcerpt">
				<h4>
					<a href="utility/dollar-f.htm" >$F</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$F(element) -> value</code></pre>
					<p>
						返回一个表单控件的值，是 <code>Form.Element.getValue</code>	方法的简称，具体细节请参见
						<a href="form/element/getValue.htm" >Form.Element.getValue</a>。
					</p>
				</div>
			</div>
			<div id="method-$h" class="mexcerpt">
				<h4>
					<a href="utility/dollar-h.htm" >$H</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$H([obj]) -> Hash</code></pre>
					<p>						
						创建一个 <a href="hash.htm" >Hash</a> （映射或关联数组）。<code>Hash</code>
						构造器的简便封装，你可以传入一个已有的对象（从本质上来说，JavaScript 的对象本身就是一个
						hash），返回封装了该对象的 <code>Hash</code>。该函数是安全的，不会影响原有对象
						（因为该函数内部复制了传入的对象）。
					</p>
				</div>
			</div>
			<div id="method-$r" class="mexcerpt">
				<h4>
					<a href="utility/dollar-r.htm" >$R</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$R(start, end[, exclusive = false]) -> ObjectRange</code></pre>
					<p>
						创建一个新的 <code>ObjectRange</code> 对象。<a href="objectRange.htm" >ObjectRange</a>
						构造器的简便封装, 但是 <code>$R</code> 是推荐使用的名称。
					</p>
				</div>
			</div>
			<div id="method-$w" class="mexcerpt">
				<h4>
					<a href="utility/dollar-w.htm" >$w</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>$w(String) -> Array</code></pre>
					<p>
						以空格作为分隔符拆分字符串，并返回一个数组。等同于 Ruby 的 <code>%w{foo bar}</code>
						或 Perl 的 <code>qw(foo bar)</code>。
					</p>
				</div>
			</div>
			<div id="method-try.these" class="mexcerpt">
				<h4>
					<a href="utility/try-these.htm" >Try.these</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code>Try.these(Function...) -> firstOKResult</code></pre>
					<p>
						接收任意数目的函数作为参数，按照函数在参数中的顺序依次执行，若其中一个函数执行成功，
						则返回该函数的执行结果，并中止后续函数的执行。若无成功执行的函数，则抛出异常。
					</p>
				</div>
			</div>
			<div id="method-document.getelementsbyclassname" class="mexcerpt">
				<h4>
					<a href="utility/getElementsByClassName.htm" >document.getElementsByClassName</a>
					<div class="box">不推荐</div>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code class=>document.getElementsByClassName(className[, element]) -> [HTMLElement...]</code></pre>
					<p>
						根据 <code>className</code> 指定的 CSS 类名返回（并扩展）匹配的 DOM 元素。
						可选的参数 <code>element</code> 用于指定 CSS 类搜寻范围，将搜寻范围限制在该元素内。
					</p>
				</div>
			</div>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
