<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Function.methodize - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>methodize</h2>
		<div id="excerpt">
			<pre><code class="ebnf">someFunction.methodize() -> Function</code></pre>
			<p>
				将原始函数方法化，返回一个新的函数，调用新函数时，实质是将原始函数的第一个参数设置为当前 <code>this</code>
				所指向的对象，然后调用原始函数。
			</p>
		</div>
		<div id="abody">
			<p>
				<code>methodize</code> 方法对原始函数进行转换，当调用时将原函数中第一个显式的参数设置为
				<code>this</code>（当前上下文），成为一个隐含参数。它常用于转换一个函数作为对象或对象原型（prototype
				属性）的方法，并简化函数的签名。
			</p>
			<h3>样例</h3>
			<pre><code class="javascript">// 从一个直接操作目标对象的简单函数开始：
var fn = function(target, foo) { 
	target.value = foo; 
};
var object = {}; 

// 使用原始函数
fn(object, 'bar'); 
object.value 
//-> 'bar' 

// 将 fn 方法化并赋给对象，它就变成对象的一个方法，这时只有一个参数： 
object.fnMethodized = fn.methodize(); 
object.fnMethodized('boom!');
object.value 
//-> 'boom!' </code></pre>
			<p>
				当然，样例中的用法并不常见。更常见的用法是复制已方法化的函数给对象的原型（prototype 属性），
				以便新的方法可以立即在对象实例间共享。在 Prototype 库中，<code>methodize</code> 在 DOM
				和事件模块中有着重要的应用：<a href="../element/methods.htm" >Element.Methods</a> 和
				<a href="../event.htm" >Event.Methods</a> 就是通过方法化后再放入它们原生的 <code>prototype</code>
				属性中的，以便在 DOM 节点和事件对象中使用。				
			</p>
			<p>
				<strong>译注：</strong>想一下 <code>Event.observe('inputId', 'click', handler)</code> 到
				<code>$('inputId').observe('click', handler)</code> 是如何转换的，是不是有一种恍然大悟的感觉呢？
			</p>
			<pre><code class="javascript">var input = document.getElementById('inputId');
input.observe = Event.observe.methodize();
input.observe('click', handler);</code></pre>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
