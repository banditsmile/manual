<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Object - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>inspect</h2>
		<div id="excerpt">
			<pre><code class="ebnf">Object.inspect(obj) -> String</code></pre>
			<p>返回 <code>obj</code> 针对调试的字符串表现形式。</p>
		</div>
		<div id="abody">
			<ul>
				<li><code>undefined</code> 和 <code>null</code> 被表示为代表自身的字符串。</li>
				<li>
					其它的类型首先查找其是否具有 <code>inspect</code> 方法：如果有，则调用这个方法，否则，调用
					<code>toString</code> 方法。
				</li>
			</ul>
			<p>
				Prototype 为许多类型提供了 <code>inspect</code> 方法——不论是内建的类型还是库自定义的类型。例如
				<a href="../string/inspect.htm" >String</a>、<a href="../array/inspect.htm" >Array</a>、<code>Enumerable</code>
				和 <a href="../hash/inspect.htm" >Hash</a>，这些方法试图从开发人员的角度出发，
				为它们所属的类型提供更为有意义的字符串描述形式。				
			</p>
			<h3>样例</h3>
			<pre><code class="javascript">Object.inspect() 
// -> 'undefined' 
Object.inspect(null)
// -> 'null' 
Object.inspect(false) 
// -> 'false' 
Object.inspect([1, 2, 3]) 
// -> '[1, 2, 3]' 
Object.inspect('hello') 
// -> "'hello'" </code></pre>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
