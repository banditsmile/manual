<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>工具函数 $H - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />	
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>$H</h2>
		<div id="excerpt">
			<pre><code class="ebnf">$H([obj]) -> Hash</code></pre>
			<p>
				创建一个 <a href="../hash.htm" >Hash</a>（按照我们的观点，它跟“map”或“关联数组”是相同的概念）。
				该函数只是简单地封装了 <code>Hash</code> 构造函数。你可以安全地传递一个已有的对象（从本质上来说，
				JavaScript 中的对象本身就是一个 hash）作为该函数的参数，它会将之封装为一个 Prototype 专有的
				<code>Hash</code> 对象，而不破坏原有的对象（在 <code>Hash</code> 构造函数中，会复制传入的对象）。
			</p>			
		</div>
		<div id="abody">
			<p>
				<strong>译注：</strong> 在调用 <code>$H</code> 函数后，参数对象和返回对象是两个独立的个体，例如：
			</p>
			<pre><code class="javascript">var tmp = {a:'aa', b:'bb'};
var h = $H(tmp);
h.set('c', 'cc');

h.toQueryString(); //返回：a=aa&b=bb&c=cc
$H(tmp).toQueryString(); //返回：a=aa&b=bb
</code></pre>
			<p>
				<code>$H</code> 函数是获取 <code>Hash</code> 的快捷方法（在 v1.5 最终版之前，它是获取
				<code>Hash</code> 的唯一途径）。
			</p>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
