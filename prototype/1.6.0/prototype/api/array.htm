<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Array - Prototype JavaScript 框架</title>
	<link href="../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>Array</h2>
		<div id="method-list">
			<ul>
				<li><a href="array.htm#method-clear">clear</a></li>
				<li><a href="array.htm#method-clone">clone</a></li>
				<li><a href="array.htm#method-compact">compact</a></li>
				<li><a href="array.htm#method-each">each</a></li>
				<li><a href="array.htm#method-first">first</a></li>
				<li><a href="array.htm#method-flatten">flatten</a></li>
				<li><a href="array.htm#method-from">from</a></li>
				<li><a href="array.htm#method-indexof">indexOf</a></li>
				<li><a href="array.htm#method-inspect">inspect</a></li>
				<li><a href="array.htm#method-last">last</a></li>
				<li><a href="array.htm#method-reduce">reduce</a></li>
				<li><a href="array.htm#method-reverse">reverse</a></li>
				<li><a href="array.htm#method-size">size</a></li>
				<li><a href="array.htm#method-toarray">toArray</a></li>
				<li><a href="array.htm#method-tojson">toJSON</a></li>
				<li><a href="array.htm#method-uniq">uniq</a></li>
				<li><a href="array.htm#method-without">without</a></li>
			</ul>
		</div>
		<div id="abody">
			<p>Prototype 用许多功能强大的函数扩展了所有原生的 Javascript 数组。</p>
			<p>主要通过以下两种方式：</p>
			<ul>
				<li>
					混入 <a href="enumerable.htm" >Enumerable</a> 模块，引入 <code>Enumerable</code> 固有的大量方法。
				</li>
				<li>另外增加了许多方法，在本节中有详细的论述。</li>
			</ul>
			<p>
				在 Prototype 中，数组变得非常强大，不再是从前那个微不足道的对象，而我们对它的操作，也不再局限于 <code>length</code> 属性和
				<code>[]</code> 索引操作符。使用新的操作方式，对于 99% 的常见应用，都能显著地简化代码。
			</p>
			<h3>
				为什么你将会停止使用 <code>for</code>&#8230;<code>in</code> 来进行迭代（或许会永远跟它说 bye-bye 了）
			</h3>
			<p>
				许多 Javascript 开发人页都曾错误的使用过 <code>for</code>&#8230;<code>in</code> 结构来迭代数组元素，这种类型的代码在
				Prototype 中将不会工作。
			</p>
			<p>
				你可以查看 <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" >ECMA 262</a> 标准，它定义了
				ECMAScript 第三版，据称所有主流浏览器都实现了该标准，甚至包括 <em>MSIE</em>。它为 <code>Array</code>（§15.4.4）
				定义了许多方法，包括一些比较受欢迎的，如 <code>concat</code>、<code>join</code>、<code>pop</code>、<code>push</code>
				等，已命名的函数有十个，但只对少数几个作了专门的描述。
			</p>
			<p>
				在这份标准中，明确定义了 <code>for</code>&#8230;<code>in</code> 结构（§12.6.4）的应用范围：枚举出现在关键字 <code>in</code>
				右方的对象的属性。只有当属性被专门标记为不可枚举时才会在迭代中被忽略。数组的 <code>prototype</code> 和 <code>length</code>
				属性已被预设为不可枚举，以防止使用 <code>for</code>&#8230;<code>in</code> 时枚举到数组的方法。这导致开发人员使用
				<code>for</code>&#8230;<code>in</code> 作为遍历的快捷手段，而掩盖了 <code>for</code>&#8230;<code>in</code> 的真实用意。
			</p>
			<p>
				然而，Prototype 并没有办法将增加到 <code>Array.prototype</code> 中的方法标记为不可枚举。因此在数组中使用
				<code>for</code>&#8230;<code>in</code>，对于 Prototype 而言，将会枚举到所有扩展方法，例如那些从
				<a href="enumerable.htm" >Enumerable</a> 模块中接收到的方法以及 Prototype 放在 <code>Array</code>
				命名空间中的方法（本节中详细描述）。
			</p>
			<h4>开发人员该怎么做？</h4>
			<p>	你可以使用索引进行遍历</p>
			<pre><code class="javascript">for (var index = 0; index < myArray.length; ++index) {
	var item = myArray[index]; 
	// 你的代码... 
} </code></pre>
			<p>或者使用<strong>迭代器（iterators）</strong>，例如 <a href="enumerable/each.htm" >each</a>：</p>
			<pre><code class="javascript">myArray.each(function(item) {
	// 你的代码... 
}); </code></pre>
			<p>
				Prototype 为使 <code>for</code>&#8230;<code>in</code> 的使用回归其真实意图而采取的强制措施所造成的副作用不再成为一个负担：
				正如你所看到的，几乎所有的数组遍历都能够通过 <code>Array</code> 提供的新方法或混入 <code>Enumerable</code>
				引入的方法更便捷的实现。因此，手动遍历将会非常罕见。
			</p>
			<h3>性能关注</h3>
			<p>
				如果你有一个非常大的数组，在迭代时使用<em>语法闭包</em>（传递到迭代器的匿名函数，在每次循环时都会被调用），例如
				<a href="enumerable/each.htm" >each</a>，或者使用需要对数组进行遍历的函数（如
				<a href="array/uniq.htm" >uniq</a>），可能性能会不尽如人意。若发生这种情况，最好用数字索引手动构造循环，
				但是要注意对 <code>length</code> 属性的缓存，并小心使用前缀 <code>++</code> 操作符。
			</p>
			<pre><code class="javascript">//通常在循环时需要缓存长度属性：这样在完全遍历大数组时具有较好的性能
for (var index = 0, len = myArray.length; index < len; ++index) {
	var item = myArray[index];
	// 你的代码...
} </code></pre>
			<p><strong>译注：</strong>为什么要缓存长度属性？在静态编译语言的 for 语句中，使用 <code>index < myArray.length</code>
			作为条件判断并无不妥，因为通常编译器会对这种类型的语句进行优化，自动缓存长度属性，但 Javascript 作为一种动态解释型语言，
			并不会自动缓存长度属性，而是每次循环完成后进行条件判断时再调用相关的属性方法求取长度，这样必须会导致性能的下降。</p>
		</div>
		<div id="method-excerpts">
			<h3>方法</h3>
			<div id="method-clear" class="mexcerpt">
				<h4><a href="array/clear.htm" >clear</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">clear() -> Array</code></pre>
					<p>清空所有数组元素。</p>
				</div>
			</div>
			<div id="method-clone" class="mexcerpt">
				<h4><a href="array/clone.htm" >clone</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">clone() -> newArray</code></pre>
					<p>在不损害原始数组的前提下，返回一个数组的复本。</p>
				</div>
			</div>
			<div id="method-compact" class="mexcerpt">
				<h4><a href="array/compact.htm" >compact</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">compact() -> newArray</code></pre>
					<p>返回一个不包含 <code>null</code>/<code>undefined</code> 值元素的数组的新版本。</p>
				</div>
			</div>
			<div id="method-each" class="mexcerpt">
				<h4><a href="array/each.htm" >each</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">each(iterator) -> Array</code></pre>
					<p>按照数字索引升序遍历数组。</p>
				</div>
			</div>
			<div id="method-first" class="mexcerpt">
				<h4><a href="array/first.htm" >first</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">first() -> value</code></pre>
					<p>返回数组中第一个元素，若数组为空，返回 <code>undefined</code>。</p>
				</div>
			</div>
			<div id="method-flatten" class="mexcerpt">
				<h4><a href="array/flatten.htm" >flatten</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">flatten() -> newArray</code></pre>
					<p>
						返回一个不具有嵌套层次结构的数组，内嵌的数组递归加入到最外层数组中。当处理递归集合算法时，这个方法被证明是非常有用的。
					</p>
				</div>
			</div>
			<div id="method-from" class="mexcerpt">
				<h4><a href="array/from.htm" >from</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Array.from(iterable) -> actualArray</code></pre>
					<p>克隆一个已有的数组或者根据一个类似于数组的集合创建新的数组。</p>
					<p><a href="utility/dollar-a.htm" >$A()</a> 工具函数的另一个称谓。完整的描述和样例请参照 <code>$A</code> 的文档。</p>
				</div>
			</div>
			<div id="method-indexof" class="mexcerpt">
				<h4><a href="array/indexof.htm" >indexOf</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">indexOf(value) -> position</code></pre>
					<p>返回数组中与参数匹配的第一个元素的位置，如果不存在匹配的元素，返回 <code>-1</code>。</p>
				</div>
			</div>
			<div id="method-inspect" class="mexcerpt">
				<h4><a href="array/inspect.htm" >inspect</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">inspect() -> String</code></pre>
					<p>返回一个数组的字符串表示形式，用于调试。<br /><strong>译注：</strong>该方法返回一个类似于创建数组的代码的字符串表现形式。如
					"['a', ['b', [Object Object]], 'c']"，更详细的信息请参阅代码。</p>
				</div>
			</div>
			<div id="method-last" class="mexcerpt">
				<h4><a href="array/last.htm" >last</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">last() -> value</code></pre>
					<p>返回数组中最后一个元素，若数组为空，返回 <code>undefined</code>。</p>
				</div>
			</div>
			<div id="method-reduce" class="mexcerpt">
				<h4><a href="array/reduce.htm" >reduce</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">reduce() -> Array | singleValue</code></pre>
					<p>简化数组：只具有一个元素的数组被转换为那个唯一的元素，包含多个元素的数组返回其本身。</p>
				</div>
			</div>
			<div id="method-reverse" class="mexcerpt">
				<h4><a href="array/reverse.htm" >reverse</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">reverse([inline = true]) -> Array</code></pre>
					<p>
						返回数组的逆序版本，默认情形下，直接在原始数组内部进行序列调整，如果 <code>inline</code> 设置为
						<code>false</code>，则首先克隆原始数组，然后在克隆版本中进行调整。
					</p>
				</div>
			</div>
			<div id="method-size" class="mexcerpt">
				<h4><a href="array/size.htm" >size</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">size() -> Number</code></pre>
					<p>返回数组的元素个数。</p>
				</div>
			</div>
			<div id="method-toarray" class="mexcerpt">
				<h4>
					<a href="array/toarray.htm" >toArray</a>
				</h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">toArray() -> newArray</code></pre>
					<p>
						这个方法针对因混入 <a href="enumerable.htm" >Enumerable</a> 而引入的 <code>toArray</code>
						方法进行了本地优化。
					</p>
				</div>
			</div>
			<div id="method-tojson" class="mexcerpt">
				<h4><a href="array/tojson.htm" >toJSON</a><div class="box">1.5.1</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">toJSON() -> String</code></pre>
					<p>返回一个 JSON 字符串。</p>
				</div>
			</div>
			<div id="method-uniq" class="mexcerpt">
				<h4><a href="array/uniq.htm" >uniq</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">uniq() -> newArray</code></pre>
					<p>返回去除数组重复元素后的版本。如果没有重复的元素，返回原始数组本身。</p>
				</div>
			</div>
			<div id="method-without" class="mexcerpt">
				<h4><a href="array/without.htm" >without</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">without(value...) -> newArray</code></pre>
					<p>返回不包括参数中任意一个指定值的数组版本。（即返回的数组中不包括任何一个参数中指定的值）</p>
				</div>
			</div>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
