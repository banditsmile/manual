<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Enumerable.find - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>find</h2>
		<div id="excerpt">
			<pre><code class="ebnf">find(iterator) -> firstElement | undefined</code></pre>
			<p>
				查找第一个使 <code>iterator</code> 返回 <code>true</code> 的元素。<a href="detect.htm" >detect</a>
				方法的简称，应优先使用 <code>find</code>，因为 <code>find</code> 更具有可读性。参数 <code>iterator</code> 是一个函数对象。
			</p>
		</div>
		<div id="abody">
			<p>
				这个方法是 <a href="findAll.htm" >findAll</a>（完全查找）的短路迭代版本。它仅返回匹配指定条件的第一个元素，
				如果未找到匹配的元素，返回 <code>undefined</code>。
			</p>
			<h3>样例</h3>
			<pre><code class="javascript">// 素数检测函数
function isPrime(n) { 
	if (2 &gt; n) 
		return false; 
	if (0 == n % 2) 
		return (2 == n);
	for (var index = 3; n / index &gt; index; index += 2) 
		if (0 == n % index) 
			return false; 
	return true; 
} 
// isPrime 
$R(10,15).find(isPrime) 
// -&gt; 11 
[ 'hello', 'world', 'this', 'is', 'nice'].find(function(s) { return s.length &lt;= 3; }) 
// -&gt; 'is' </code></pre>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
