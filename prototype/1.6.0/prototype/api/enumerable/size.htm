<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Enumerable.size - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>size</h2>
		<div id="excerpt">
			<pre><code class="ebnf">size() -> Number</code></pre>
			<p>返回 <code>Enumerable</code> 中元素的数目。</p>
		</div>
		<div id="abody">
			<h3>样例</h3>
			<pre><code class="javascript">$R(1, 10).size() 
// -> 10 
['hello', 42, true].size() 
// -> 3 
$H().size() 
// -> 0 </code></pre>
			<h3>性能参考</h3>
			<p>
				该方法仅提供一个计算 <code>Enumerable</code> 对象长度的通用版本。默认的实现是通过循环，这意味着它具有线性的时间复杂度。
				很多混入 <code>Enumerable</code> 的对象可通过重写 <code>size</code> 方法来进行优化。一个现成的例子是<a href="../array.htm" >
				Array</a>，它重写了 <a href="../array/size.htm" >size</a> 方法，通过数组原生的 <code>length</code> 属性来获取长度。				
			</p>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
