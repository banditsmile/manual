<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Form.request - Prototype JavaScript 框架</title>
	<link href="../../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>request<div class="box">1.5.1</div></h2>
		<div id="excerpt">
			<pre><code class="ebnf">request([options]) -> new Ajax.Request</code></pre>
			<p>
				这是一个便捷的方法，可将表单串行化并通过 <a href="../ajax.htm" >Ajax.Request</a> 提交到表单
				<code>action</code> 属性指定的 URL。参数 <code>options</code> 会被传递到 Ajax.Request
				实例。在 <code>options</code> 参数中，可重定义表单的 HTTP 发送方式（<strong>译注：</strong>指
				get、post 等等）并指定附加的参数。
			</p>
		</div>
		<div id="abody">
			<p>
				传递到 <code>request()</code> 的 <code>options</code> 参数会智能的与 <a href="../ajax/options.htm" >Ajax.Request
				选项</a> 进行融合：
			</p>
			<ul>
				<li>
					如果表单具有 <code>method</code> 属性，这个值将被用于 <code>Ajax.Request</code> 的 <code>method</code>
					选项。如果 <code>options</code> 参数中指定了 <code>method</code> 选项，则优先使用参数中指定的值。
					如果两者均未指定，<code>method</code> 的值默认为“POST”。
				</li>
				<li>				
					在参数 <code>options</code> 中通过属性 <code>parameters</code> 指定的“键值”对（即一个 hash
					列表或是一个查询字符串）将会被合并到已序列化的表单参数中（并且前者具有较高的优先级）。
				</li>
			</ul>
			<h3>样例</h3>
			<p>假设有如下的 HTML 表单：</p>
			<pre><code class="html">&lt;form id=&quot;person-example&quot; method=&quot;POST&quot; action=&quot;/user/info&quot;&gt; 
	&lt;fieldset&gt;
		&lt;legend&gt;User info&lt;/legend&gt;
		&lt;div&gt;
			&lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt; 
			&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; value=&quot;&quot;/&gt;
		&lt;/div&gt; 
		&lt;div&gt;
			&lt;label for=&quot;age&quot;&gt;Age:&lt;/label&gt;
			&lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; value=&quot;&quot; size=&quot;3&quot; /&gt;
		&lt;/div&gt; 
		&lt;div&gt;
			&lt;label for=&quot;hobbies&quot;&gt;Your hobbies are:&lt;/label&gt; 
			&lt;select name=&quot;hobbies[]&quot; id=&quot;hobbies&quot; multiple=&quot;multiple&quot;&gt; 
				&lt;option&gt;coding&lt;/option&gt; 
				&lt;option&gt;swimming&lt;/option&gt;
				&lt;option&gt;hiking&lt;/option&gt; 
				&lt;option&gt;drawing&lt;/option&gt; 
			&lt;/select&gt;
		&lt;/div&gt; 
		&lt;div class=&quot;buttonrow&quot;&gt;
			&lt;input type=&quot;submit&quot; value=&quot;serialize!&quot; /&gt;
		&lt;/div&gt; 
	&lt;/fieldset&gt; 
&lt;/form&gt; </code></pre>
			<p>使用 Ajax 发送这个表单非常简单：</p>
			<pre><code class="javascript">$('person-example').request(); 
//表单已经被发送 
//做同样的事情，但在发送完成后进行回调： 
$('person-example').request({ 
	onComplete: function(){
		alert('Form data saved!') 
	} 
})</code></pre>
			<p>
				若需要重新定义 HTTP 的发送方式或增加一些参数，请在参数 <code>options</code> 中使用 <code>method</code>
				和 <code>parameters</code> 属性指定。在下面的样例中，我们将设置发送方式为 GET，并且增加两个固定不变的参数值：
				<code>interests</code> 和 <code>hobbies</code>。虽然表单中已经存在这两个值，但这里的值会被优先使用。
			</p>
			<pre><code class="javascript">$('person-example').request({ 
	method: 'get', 
	parameters: { interests:'JavaScript', 'hobbies[]':['programming', 'music'] }, 
	onComplete: function(){ alert('Form data saved!') } 
})</code></pre>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
