<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><meta http-equiv=Content-Type content='text/html; charset=utf-8'>

	<title>Object - Prototype JavaScript 框架</title>
	<link href="../CSS/main.css"  type='text/css' rel='Stylesheet' />
</head>
<body>
	<!-- main -->
	<div id="main" class="clearfix">
		<h2>Object</h2>
		<div id="method-list">
			<ul>
				<li><a href="object.htm#method-clone">clone</a></li>
				<li><a href="object.htm#method-extend">extend</a></li>
				<li><a href="object.htm#method-inspect">inspect</a></li>
				<li><a href="object.htm#method-isarray">isArray</a></li>
				<li><a href="object.htm#method-iselement">isElement</a></li>
				<li><a href="object.htm#method-isfunction">isFunction</a></li>
				<li><a href="object.htm#method-ishash">isHash</a></li>
				<li><a href="object.htm#method-isnumber">isNumber</a></li>
				<li><a href="object.htm#method-isstring">isString</a></li>
				<li><a href="object.htm#method-isundefined">isUndefined</a></li>
				<li><a href="object.htm#method-keys">keys</a></li>
				<li><a href="object.htm#method-tohtml">toHTML</a></li>
				<li><a href="object.htm#method-tojson">toJSON</a></li>
				<li><a href="object.htm#method-toquerystring">toQueryString</a></li>
				<li><a href="object.htm#method-values">values</a></li>
			</ul>
		</div>
		<div id="abody">
			<p>
				在 Prototype 中，<code>Object</code> 可以看作是一个命名空间，也就是说，它把许多新的方法聚集在一起，
				然后需要通过一个名称前缀（如以“<code>Object.</code>”开头）才能够访问。
			</p>
			<p>
				作为普通的开发人员（指简单的使用 Prototype 而不需要对其进行扩展的开发人员），本章中最常用的方法可能是
				<a href="object/inspect.htm" >inspect</a>，其次是 <a href="object/clone.htm" >clone</a>。
			</p>
			<p>
				而作为高级的开发人员，他们希望像 Prototype 一样创建自己的类，或者是把对象当作 hash 以解析对象的结构。
				对于这些人来说，他们常用的方法可能是 <a href="object/extend.htm" >extend</a>、<a href="object/keys.htm" >keys</a>
				和 <a href="object/values.htm" >values</a>。
			</p>
		</div>
		<div id="method-excerpts">
			<h3>方法</h3>
			<div id="method-clone" class="mexcerpt">
				<h4><a href="object/clone.htm" >clone</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Object.clone(obj) -> Object</code></pre>
					<p>使用浅拷贝克隆传入的对象（复制所有原始的属性到结果中）。</p>
				</div>
			</div>
			<div id="method-extend" class="mexcerpt">
				<h4><a href="object/extend.htm" >extend</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Object.extend(dest, src) -> alteredDest</code></pre>
					<p>
						复制 <code>src</code> 所有的属性到 <code>dest</code> 对象中。通过复制到目标对象的原型（prototype），
						Prototype 可以用这个方法模拟出类的继承。
					</p>
				</div>
			</div>
			<div id="method-inspect" class="mexcerpt">
				<h4><a href="object/inspect.htm" >inspect</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Object.inspect(obj) -> String</code></pre>
					<p>返回 <code>obj</code> 针对调试的字符串表现形式。</p>
				</div>
			</div>
			<div id="method-isarray" class="mexcerpt">
				<h4><a href="object/isarray.htm" >isArray</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isArray(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个数组，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-iselement" class="mexcerpt">
				<h4><a href="object/iselement.htm" >isElement</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isElement(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个 DOM 级别 1 的节点，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-isfunction" class="mexcerpt">
				<h4><a href="object/isfunction.htm" >isFunction</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isFunction(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个 <code>Function</code> 对象，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-ishash" class="mexcerpt">
				<h4><a href="object/ishash.htm" >isHash</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isHash(obj) -> Boolean</code></pre>
					<p>
						如果 <code>obj</code> 是一个 <a href="hash.htm" >Hash</a> 类的实例，返回 <code>true</code>，否则返回
						<code>false</code>。
					</p>
				</div>
			</div>
			<div id="method-isnumber" class="mexcerpt">
				<h4><a href="object/isnumber.htm" >isNumber</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isNumber(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个 <code>Number</code> 对象，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-isstring" class="mexcerpt">
				<h4><a href="object/isstring.htm" >isString</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isString(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个 <code>String</code> 对象，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-isundefined" class="mexcerpt">
				<h4><a href="object/isundefined.htm" >isUndefined</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">isUndefined(obj) -> Boolean</code></pre>
					<p>如果 <code>obj</code> 是一个 <code>undefined</code> 的类型，返回 <code>true</code>，否则返回 <code>false</code>。</p>
				</div>
			</div>
			<div id="method-keys" class="mexcerpt">
				<h4><a href="object/keys.htm" >keys</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Object.keys(obj) -> [String...]</code></pre>
					<p>把 <code>obj</code> 当作一个 <a href="hash.htm" >Hash</a>，然后返回该对象的属性名称列表。</p>
				</div>
			</div>
			<div id="method-tohtml" class="mexcerpt">
				<h4><a href="object/tohtml.htm" >toHTML</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">toHTML(obj) -> String</code></pre>
					<p>
						如果 <code>obj</code> 具有 <code>toHTML</code> 方法，则调用 <code>obj</code> 的
						<code>toHTML</code> 方法，否则将 <code>obj</code> 作为 <code>String.interpret</code>
						的参数然后调用该方法。返回调用这些方法后的返回值。
					</p>
				</div>
			</div>
			<div id="method-tojson" class="mexcerpt">
				<h4><a href="object/tojson.htm" >toJSON</a><div class="box">1.5.1</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">toJSON(obj) -> String</code></pre>
					<p>返回一个 JSON 字符串。</p>
				</div>
			</div>
			<div id="method-toquerystring" class="mexcerpt">
				<h4><a href="object/toquerystring.htm" >toQueryString</a><div class="box">1.6</div></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">toQueryString(obj) -> String</code></pre>
					<p>将一个对象转换为 URL 编码字符串形式。</p>
				</div>
			</div>
			<div id="method-values" class="mexcerpt">
				<h4><a href="object/values.htm" >values</a></h4>
				<div class="mexcerpt-cnt">
					<pre><code class="ebnf">Object.values(obj) -> Array</code></pre>
					<p>把 <code>obj</code> 当作一个 <a href="hash.htm" >Hash</a>，然后返回该对象所有属性的值。</p>
				</div>
			</div>
		</div>
	</div>
	<!-- /main -->
</body>
</html>
